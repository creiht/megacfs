// Code generated by protoc-gen-gogo.
// source: formic_api.proto
// DO NOT EDIT!

/*
	Package proto is a generated protocol buffer package.

	It is generated from these files:
		formic_api.proto

	It has these top-level messages:
		DirEnt
		DirEntries
		Attr
		SetAttrRequest
		SetAttrResponse
		GetAttrRequest
		GetAttrResponse
		ReadRequest
		ReadResponse
		WriteRequest
		WriteResponse
		MkDirRequest
		MkDirResponse
		CreateRequest
		CreateResponse
		RemoveRequest
		RemoveResponse
		LookupRequest
		LookupResponse
		ReadDirAllRequest
		ReadDirAllResponse
		SymlinkRequest
		SymlinkResponse
		ReadlinkRequest
		ReadlinkResponse
		GetxattrRequest
		GetxattrResponse
		SetxattrRequest
		SetxattrResponse
		ListxattrRequest
		ListxattrResponse
		RemovexattrRequest
		RemovexattrResponse
		RenameRequest
		RenameResponse
		StatfsRequest
		StatfsResponse
		InitFsRequest
		InitFsResponse
		InodeEntry
		Tombstone
		Dirty
		DirEntry
		FileBlock
		ModFS
		CreateFSRequest
		CreateFSResponse
		ListFSRequest
		ListFSResponse
		ShowFSRequest
		ShowFSResponse
		DeleteFSRequest
		DeleteFSResponse
		UpdateFSRequest
		UpdateFSResponse
		GrantAddrFSRequest
		GrantAddrFSResponse
		RevokeAddrFSRequest
		RevokeAddrFSResponse
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

// DirEnt is a directory entry
type DirEnt struct {
	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Parent uint64 `protobuf:"varint,2,opt,name=parent,proto3" json:"parent,omitempty"`
	Type   uint32 `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *DirEnt) Reset()                    { *m = DirEnt{} }
func (m *DirEnt) String() string            { return proto1.CompactTextString(m) }
func (*DirEnt) ProtoMessage()               {}
func (*DirEnt) Descriptor() ([]byte, []int) { return fileDescriptorFormicApi, []int{0} }

// DirEntries just contains a list of directory entries
type DirEntries struct {
	DirEntries []*DirEnt `protobuf:"bytes,1,rep,name=DirEntries,json=dirEntries" json:"DirEntries,omitempty"`
}

func (m *DirEntries) Reset()                    { *m = DirEntries{} }
func (m *DirEntries) String() string            { return proto1.CompactTextString(m) }
func (*DirEntries) ProtoMessage()               {}
func (*DirEntries) Descriptor() ([]byte, []int) { return fileDescriptorFormicApi, []int{1} }

func (m *DirEntries) GetDirEntries() []*DirEnt {
	if m != nil {
		return m.DirEntries
	}
	return nil
}

// Attr
type Attr struct {
	Inode  uint64 `protobuf:"varint,1,opt,name=inode,proto3" json:"inode,omitempty"`
	Atime  int64  `protobuf:"varint,2,opt,name=atime,proto3" json:"atime,omitempty"`
	Mtime  int64  `protobuf:"varint,3,opt,name=mtime,proto3" json:"mtime,omitempty"`
	Ctime  int64  `protobuf:"varint,4,opt,name=ctime,proto3" json:"ctime,omitempty"`
	Crtime int64  `protobuf:"varint,5,opt,name=crtime,proto3" json:"crtime,omitempty"`
	Mode   uint32 `protobuf:"varint,6,opt,name=mode,proto3" json:"mode,omitempty"`
	Valid  int32  `protobuf:"varint,7,opt,name=valid,proto3" json:"valid,omitempty"`
	Size_  uint64 `protobuf:"varint,8,opt,name=size,proto3" json:"size,omitempty"`
	Uid    uint32 `protobuf:"varint,9,opt,name=uid,proto3" json:"uid,omitempty"`
	Gid    uint32 `protobuf:"varint,10,opt,name=gid,proto3" json:"gid,omitempty"`
}

func (m *Attr) Reset()                    { *m = Attr{} }
func (m *Attr) String() string            { return proto1.CompactTextString(m) }
func (*Attr) ProtoMessage()               {}
func (*Attr) Descriptor() ([]byte, []int) { return fileDescriptorFormicApi, []int{2} }

// SetAttrRequest
type SetAttrRequest struct {
	Attr  *Attr  `protobuf:"bytes,1,opt,name=attr" json:"attr,omitempty"`
	Valid uint32 `protobuf:"varint,2,opt,name=valid,proto3" json:"valid,omitempty"`
}

func (m *SetAttrRequest) Reset()                    { *m = SetAttrRequest{} }
func (m *SetAttrRequest) String() string            { return proto1.CompactTextString(m) }
func (*SetAttrRequest) ProtoMessage()               {}
func (*SetAttrRequest) Descriptor() ([]byte, []int) { return fileDescriptorFormicApi, []int{3} }

func (m *SetAttrRequest) GetAttr() *Attr {
	if m != nil {
		return m.Attr
	}
	return nil
}

// SetAttrResponse
type SetAttrResponse struct {
	Attr *Attr `protobuf:"bytes,1,opt,name=attr" json:"attr,omitempty"`
}

func (m *SetAttrResponse) Reset()                    { *m = SetAttrResponse{} }
func (m *SetAttrResponse) String() string            { return proto1.CompactTextString(m) }
func (*SetAttrResponse) ProtoMessage()               {}
func (*SetAttrResponse) Descriptor() ([]byte, []int) { return fileDescriptorFormicApi, []int{4} }

func (m *SetAttrResponse) GetAttr() *Attr {
	if m != nil {
		return m.Attr
	}
	return nil
}

// GetAttrRequest
type GetAttrRequest struct {
	Inode uint64 `protobuf:"varint,1,opt,name=inode,proto3" json:"inode,omitempty"`
}

func (m *GetAttrRequest) Reset()                    { *m = GetAttrRequest{} }
func (m *GetAttrRequest) String() string            { return proto1.CompactTextString(m) }
func (*GetAttrRequest) ProtoMessage()               {}
func (*GetAttrRequest) Descriptor() ([]byte, []int) { return fileDescriptorFormicApi, []int{5} }

// GetAttrResponse
type GetAttrResponse struct {
	Attr *Attr `protobuf:"bytes,1,opt,name=attr" json:"attr,omitempty"`
}

func (m *GetAttrResponse) Reset()                    { *m = GetAttrResponse{} }
func (m *GetAttrResponse) String() string            { return proto1.CompactTextString(m) }
func (*GetAttrResponse) ProtoMessage()               {}
func (*GetAttrResponse) Descriptor() ([]byte, []int) { return fileDescriptorFormicApi, []int{6} }

func (m *GetAttrResponse) GetAttr() *Attr {
	if m != nil {
		return m.Attr
	}
	return nil
}

// ReqadRequest
type ReadRequest struct {
	Inode  uint64 `protobuf:"varint,1,opt,name=inode,proto3" json:"inode,omitempty"`
	Offset int64  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Size_  int64  `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
}

func (m *ReadRequest) Reset()                    { *m = ReadRequest{} }
func (m *ReadRequest) String() string            { return proto1.CompactTextString(m) }
func (*ReadRequest) ProtoMessage()               {}
func (*ReadRequest) Descriptor() ([]byte, []int) { return fileDescriptorFormicApi, []int{7} }

// ReadResponse
type ReadResponse struct {
	Inode   uint64 `protobuf:"varint,1,opt,name=inode,proto3" json:"inode,omitempty"`
	Payload []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *ReadResponse) Reset()                    { *m = ReadResponse{} }
func (m *ReadResponse) String() string            { return proto1.CompactTextString(m) }
func (*ReadResponse) ProtoMessage()               {}
func (*ReadResponse) Descriptor() ([]byte, []int) { return fileDescriptorFormicApi, []int{8} }

// WriteRequest
type WriteRequest struct {
	Inode   uint64 `protobuf:"varint,1,opt,name=inode,proto3" json:"inode,omitempty"`
	Offset  int64  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Payload []byte `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *WriteRequest) Reset()                    { *m = WriteRequest{} }
func (m *WriteRequest) String() string            { return proto1.CompactTextString(m) }
func (*WriteRequest) ProtoMessage()               {}
func (*WriteRequest) Descriptor() ([]byte, []int) { return fileDescriptorFormicApi, []int{9} }

// WriteResponse place holder. Maybe use an enum so
// we can map to fuse errors ?
type WriteResponse struct {
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *WriteResponse) Reset()                    { *m = WriteResponse{} }
func (m *WriteResponse) String() string            { return proto1.CompactTextString(m) }
func (*WriteResponse) ProtoMessage()               {}
func (*WriteResponse) Descriptor() ([]byte, []int) { return fileDescriptorFormicApi, []int{10} }

// MkdirRequest
type MkDirRequest struct {
	Parent uint64 `protobuf:"varint,1,opt,name=parent,proto3" json:"parent,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Attr   *Attr  `protobuf:"bytes,3,opt,name=attr" json:"attr,omitempty"`
}

func (m *MkDirRequest) Reset()                    { *m = MkDirRequest{} }
func (m *MkDirRequest) String() string            { return proto1.CompactTextString(m) }
func (*MkDirRequest) ProtoMessage()               {}
func (*MkDirRequest) Descriptor() ([]byte, []int) { return fileDescriptorFormicApi, []int{11} }

func (m *MkDirRequest) GetAttr() *Attr {
	if m != nil {
		return m.Attr
	}
	return nil
}

// MkdirResponse
type MkDirResponse struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Attr *Attr  `protobuf:"bytes,2,opt,name=attr" json:"attr,omitempty"`
}

func (m *MkDirResponse) Reset()                    { *m = MkDirResponse{} }
func (m *MkDirResponse) String() string            { return proto1.CompactTextString(m) }
func (*MkDirResponse) ProtoMessage()               {}
func (*MkDirResponse) Descriptor() ([]byte, []int) { return fileDescriptorFormicApi, []int{12} }

func (m *MkDirResponse) GetAttr() *Attr {
	if m != nil {
		return m.Attr
	}
	return nil
}

// CreateRequest
type CreateRequest struct {
	Parent uint64 `protobuf:"varint,1,opt,name=parent,proto3" json:"parent,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Attr   *Attr  `protobuf:"bytes,3,opt,name=attr" json:"attr,omitempty"`
}

func (m *CreateRequest) Reset()                    { *m = CreateRequest{} }
func (m *CreateRequest) String() string            { return proto1.CompactTextString(m) }
func (*CreateRequest) ProtoMessage()               {}
func (*CreateRequest) Descriptor() ([]byte, []int) { return fileDescriptorFormicApi, []int{13} }

func (m *CreateRequest) GetAttr() *Attr {
	if m != nil {
		return m.Attr
	}
	return nil
}

// CreateResponse
type CreateResponse struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Attr *Attr  `protobuf:"bytes,2,opt,name=attr" json:"attr,omitempty"`
}

func (m *CreateResponse) Reset()                    { *m = CreateResponse{} }
func (m *CreateResponse) String() string            { return proto1.CompactTextString(m) }
func (*CreateResponse) ProtoMessage()               {}
func (*CreateResponse) Descriptor() ([]byte, []int) { return fileDescriptorFormicApi, []int{14} }

func (m *CreateResponse) GetAttr() *Attr {
	if m != nil {
		return m.Attr
	}
	return nil
}

// RemoveRequest
type RemoveRequest struct {
	Parent uint64 `protobuf:"varint,1,opt,name=parent,proto3" json:"parent,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *RemoveRequest) Reset()                    { *m = RemoveRequest{} }
func (m *RemoveRequest) String() string            { return proto1.CompactTextString(m) }
func (*RemoveRequest) ProtoMessage()               {}
func (*RemoveRequest) Descriptor() ([]byte, []int) { return fileDescriptorFormicApi, []int{15} }

// RemoveResponse
type RemoveResponse struct {
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *RemoveResponse) Reset()                    { *m = RemoveResponse{} }
func (m *RemoveResponse) String() string            { return proto1.CompactTextString(m) }
func (*RemoveResponse) ProtoMessage()               {}
func (*RemoveResponse) Descriptor() ([]byte, []int) { return fileDescriptorFormicApi, []int{16} }

// LookupRequest
type LookupRequest struct {
	Parent uint64 `protobuf:"varint,1,opt,name=parent,proto3" json:"parent,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *LookupRequest) Reset()                    { *m = LookupRequest{} }
func (m *LookupRequest) String() string            { return proto1.CompactTextString(m) }
func (*LookupRequest) ProtoMessage()               {}
func (*LookupRequest) Descriptor() ([]byte, []int) { return fileDescriptorFormicApi, []int{17} }

// LookupResponse is a directory entry
type LookupResponse struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Attr *Attr  `protobuf:"bytes,2,opt,name=attr" json:"attr,omitempty"`
}

func (m *LookupResponse) Reset()                    { *m = LookupResponse{} }
func (m *LookupResponse) String() string            { return proto1.CompactTextString(m) }
func (*LookupResponse) ProtoMessage()               {}
func (*LookupResponse) Descriptor() ([]byte, []int) { return fileDescriptorFormicApi, []int{18} }

func (m *LookupResponse) GetAttr() *Attr {
	if m != nil {
		return m.Attr
	}
	return nil
}

// ReadDirAllRequest
type ReadDirAllRequest struct {
	Inode uint64 `protobuf:"varint,1,opt,name=inode,proto3" json:"inode,omitempty"`
}

func (m *ReadDirAllRequest) Reset()                    { *m = ReadDirAllRequest{} }
func (m *ReadDirAllRequest) String() string            { return proto1.CompactTextString(m) }
func (*ReadDirAllRequest) ProtoMessage()               {}
func (*ReadDirAllRequest) Descriptor() ([]byte, []int) { return fileDescriptorFormicApi, []int{19} }

// ReadDirAllResponse
type ReadDirAllResponse struct {
	DirEntries []*DirEnt `protobuf:"bytes,1,rep,name=DirEntries,json=dirEntries" json:"DirEntries,omitempty"`
}

func (m *ReadDirAllResponse) Reset()                    { *m = ReadDirAllResponse{} }
func (m *ReadDirAllResponse) String() string            { return proto1.CompactTextString(m) }
func (*ReadDirAllResponse) ProtoMessage()               {}
func (*ReadDirAllResponse) Descriptor() ([]byte, []int) { return fileDescriptorFormicApi, []int{20} }

func (m *ReadDirAllResponse) GetDirEntries() []*DirEnt {
	if m != nil {
		return m.DirEntries
	}
	return nil
}

// SymlinkRequest
type SymlinkRequest struct {
	Parent uint64 `protobuf:"varint,1,opt,name=parent,proto3" json:"parent,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Target string `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	Uid    uint32 `protobuf:"varint,4,opt,name=uid,proto3" json:"uid,omitempty"`
	Gid    uint32 `protobuf:"varint,5,opt,name=gid,proto3" json:"gid,omitempty"`
}

func (m *SymlinkRequest) Reset()                    { *m = SymlinkRequest{} }
func (m *SymlinkRequest) String() string            { return proto1.CompactTextString(m) }
func (*SymlinkRequest) ProtoMessage()               {}
func (*SymlinkRequest) Descriptor() ([]byte, []int) { return fileDescriptorFormicApi, []int{21} }

// SymlinkResponse
type SymlinkResponse struct {
	Parent uint64 `protobuf:"varint,1,opt,name=parent,proto3" json:"parent,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Attr   *Attr  `protobuf:"bytes,3,opt,name=attr" json:"attr,omitempty"`
}

func (m *SymlinkResponse) Reset()                    { *m = SymlinkResponse{} }
func (m *SymlinkResponse) String() string            { return proto1.CompactTextString(m) }
func (*SymlinkResponse) ProtoMessage()               {}
func (*SymlinkResponse) Descriptor() ([]byte, []int) { return fileDescriptorFormicApi, []int{22} }

func (m *SymlinkResponse) GetAttr() *Attr {
	if m != nil {
		return m.Attr
	}
	return nil
}

// ReadlinkRequest
type ReadlinkRequest struct {
	Inode uint64 `protobuf:"varint,1,opt,name=inode,proto3" json:"inode,omitempty"`
}

func (m *ReadlinkRequest) Reset()                    { *m = ReadlinkRequest{} }
func (m *ReadlinkRequest) String() string            { return proto1.CompactTextString(m) }
func (*ReadlinkRequest) ProtoMessage()               {}
func (*ReadlinkRequest) Descriptor() ([]byte, []int) { return fileDescriptorFormicApi, []int{23} }

// ReadlinkResponse
type ReadlinkResponse struct {
	Target string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
}

func (m *ReadlinkResponse) Reset()                    { *m = ReadlinkResponse{} }
func (m *ReadlinkResponse) String() string            { return proto1.CompactTextString(m) }
func (*ReadlinkResponse) ProtoMessage()               {}
func (*ReadlinkResponse) Descriptor() ([]byte, []int) { return fileDescriptorFormicApi, []int{24} }

// Getxattr
type GetxattrRequest struct {
	Inode    uint64 `protobuf:"varint,1,opt,name=inode,proto3" json:"inode,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Size_    uint32 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	Position uint32 `protobuf:"varint,4,opt,name=position,proto3" json:"position,omitempty"`
}

func (m *GetxattrRequest) Reset()                    { *m = GetxattrRequest{} }
func (m *GetxattrRequest) String() string            { return proto1.CompactTextString(m) }
func (*GetxattrRequest) ProtoMessage()               {}
func (*GetxattrRequest) Descriptor() ([]byte, []int) { return fileDescriptorFormicApi, []int{25} }

type GetxattrResponse struct {
	Xattr []byte `protobuf:"bytes,1,opt,name=xattr,proto3" json:"xattr,omitempty"`
}

func (m *GetxattrResponse) Reset()                    { *m = GetxattrResponse{} }
func (m *GetxattrResponse) String() string            { return proto1.CompactTextString(m) }
func (*GetxattrResponse) ProtoMessage()               {}
func (*GetxattrResponse) Descriptor() ([]byte, []int) { return fileDescriptorFormicApi, []int{26} }

// Setxattr
type SetxattrRequest struct {
	Inode    uint64 `protobuf:"varint,1,opt,name=inode,proto3" json:"inode,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Value    []byte `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Position uint32 `protobuf:"varint,4,opt,name=position,proto3" json:"position,omitempty"`
	Flags    uint32 `protobuf:"varint,5,opt,name=flags,proto3" json:"flags,omitempty"`
}

func (m *SetxattrRequest) Reset()                    { *m = SetxattrRequest{} }
func (m *SetxattrRequest) String() string            { return proto1.CompactTextString(m) }
func (*SetxattrRequest) ProtoMessage()               {}
func (*SetxattrRequest) Descriptor() ([]byte, []int) { return fileDescriptorFormicApi, []int{27} }

type SetxattrResponse struct {
}

func (m *SetxattrResponse) Reset()                    { *m = SetxattrResponse{} }
func (m *SetxattrResponse) String() string            { return proto1.CompactTextString(m) }
func (*SetxattrResponse) ProtoMessage()               {}
func (*SetxattrResponse) Descriptor() ([]byte, []int) { return fileDescriptorFormicApi, []int{28} }

// Listxattr
type ListxattrRequest struct {
	Inode    uint64 `protobuf:"varint,1,opt,name=inode,proto3" json:"inode,omitempty"`
	Size_    uint32 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Position uint32 `protobuf:"varint,3,opt,name=position,proto3" json:"position,omitempty"`
}

func (m *ListxattrRequest) Reset()                    { *m = ListxattrRequest{} }
func (m *ListxattrRequest) String() string            { return proto1.CompactTextString(m) }
func (*ListxattrRequest) ProtoMessage()               {}
func (*ListxattrRequest) Descriptor() ([]byte, []int) { return fileDescriptorFormicApi, []int{29} }

type ListxattrResponse struct {
	Xattr []byte `protobuf:"bytes,1,opt,name=xattr,proto3" json:"xattr,omitempty"`
}

func (m *ListxattrResponse) Reset()                    { *m = ListxattrResponse{} }
func (m *ListxattrResponse) String() string            { return proto1.CompactTextString(m) }
func (*ListxattrResponse) ProtoMessage()               {}
func (*ListxattrResponse) Descriptor() ([]byte, []int) { return fileDescriptorFormicApi, []int{30} }

// Removexattr
type RemovexattrRequest struct {
	Inode uint64 `protobuf:"varint,1,opt,name=inode,proto3" json:"inode,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *RemovexattrRequest) Reset()                    { *m = RemovexattrRequest{} }
func (m *RemovexattrRequest) String() string            { return proto1.CompactTextString(m) }
func (*RemovexattrRequest) ProtoMessage()               {}
func (*RemovexattrRequest) Descriptor() ([]byte, []int) { return fileDescriptorFormicApi, []int{31} }

type RemovexattrResponse struct {
}

func (m *RemovexattrResponse) Reset()                    { *m = RemovexattrResponse{} }
func (m *RemovexattrResponse) String() string            { return proto1.CompactTextString(m) }
func (*RemovexattrResponse) ProtoMessage()               {}
func (*RemovexattrResponse) Descriptor() ([]byte, []int) { return fileDescriptorFormicApi, []int{32} }

// Rename
type RenameRequest struct {
	OldParent uint64 `protobuf:"varint,1,opt,name=oldParent,proto3" json:"oldParent,omitempty"`
	NewParent uint64 `protobuf:"varint,2,opt,name=newParent,proto3" json:"newParent,omitempty"`
	OldName   string `protobuf:"bytes,3,opt,name=oldName,proto3" json:"oldName,omitempty"`
	NewName   string `protobuf:"bytes,4,opt,name=newName,proto3" json:"newName,omitempty"`
}

func (m *RenameRequest) Reset()                    { *m = RenameRequest{} }
func (m *RenameRequest) String() string            { return proto1.CompactTextString(m) }
func (*RenameRequest) ProtoMessage()               {}
func (*RenameRequest) Descriptor() ([]byte, []int) { return fileDescriptorFormicApi, []int{33} }

type RenameResponse struct {
}

func (m *RenameResponse) Reset()                    { *m = RenameResponse{} }
func (m *RenameResponse) String() string            { return proto1.CompactTextString(m) }
func (*RenameResponse) ProtoMessage()               {}
func (*RenameResponse) Descriptor() ([]byte, []int) { return fileDescriptorFormicApi, []int{34} }

// Statfs
type StatfsRequest struct {
}

func (m *StatfsRequest) Reset()                    { *m = StatfsRequest{} }
func (m *StatfsRequest) String() string            { return proto1.CompactTextString(m) }
func (*StatfsRequest) ProtoMessage()               {}
func (*StatfsRequest) Descriptor() ([]byte, []int) { return fileDescriptorFormicApi, []int{35} }

type StatfsResponse struct {
	Blocks  uint64 `protobuf:"varint,1,opt,name=blocks,proto3" json:"blocks,omitempty"`
	Bfree   uint64 `protobuf:"varint,2,opt,name=bfree,proto3" json:"bfree,omitempty"`
	Bavail  uint64 `protobuf:"varint,3,opt,name=bavail,proto3" json:"bavail,omitempty"`
	Files   uint64 `protobuf:"varint,4,opt,name=files,proto3" json:"files,omitempty"`
	Ffree   uint64 `protobuf:"varint,5,opt,name=ffree,proto3" json:"ffree,omitempty"`
	Bsize   uint32 `protobuf:"varint,6,opt,name=bsize,proto3" json:"bsize,omitempty"`
	Namelen uint32 `protobuf:"varint,7,opt,name=namelen,proto3" json:"namelen,omitempty"`
	Frsize  uint32 `protobuf:"varint,8,opt,name=frsize,proto3" json:"frsize,omitempty"`
}

func (m *StatfsResponse) Reset()                    { *m = StatfsResponse{} }
func (m *StatfsResponse) String() string            { return proto1.CompactTextString(m) }
func (*StatfsResponse) ProtoMessage()               {}
func (*StatfsResponse) Descriptor() ([]byte, []int) { return fileDescriptorFormicApi, []int{36} }

// InitFs
type InitFsRequest struct {
}

func (m *InitFsRequest) Reset()                    { *m = InitFsRequest{} }
func (m *InitFsRequest) String() string            { return proto1.CompactTextString(m) }
func (*InitFsRequest) ProtoMessage()               {}
func (*InitFsRequest) Descriptor() ([]byte, []int) { return fileDescriptorFormicApi, []int{37} }

type InitFsResponse struct {
}

func (m *InitFsResponse) Reset()                    { *m = InitFsResponse{} }
func (m *InitFsResponse) String() string            { return proto1.CompactTextString(m) }
func (*InitFsResponse) ProtoMessage()               {}
func (*InitFsResponse) Descriptor() ([]byte, []int) { return fileDescriptorFormicApi, []int{38} }

// Inode
// This is used for serialization of the inode metadata
// This is *not* used for api calls
type InodeEntry struct {
	Version   uint32            `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	IsDir     bool              `protobuf:"varint,2,opt,name=isDir,proto3" json:"isDir,omitempty"`
	Attr      *Attr             `protobuf:"bytes,3,opt,name=attr" json:"attr,omitempty"`
	Parent    uint64            `protobuf:"varint,4,opt,name=parent,proto3" json:"parent,omitempty"`
	Inode     uint64            `protobuf:"varint,5,opt,name=inode,proto3" json:"inode,omitempty"`
	NodeCount uint64            `protobuf:"varint,6,opt,name=nodeCount,proto3" json:"nodeCount,omitempty"`
	IsLink    bool              `protobuf:"varint,7,opt,name=isLink,proto3" json:"isLink,omitempty"`
	Target    string            `protobuf:"bytes,8,opt,name=target,proto3" json:"target,omitempty"`
	Xattr     map[string][]byte `protobuf:"bytes,9,rep,name=xattr" json:"xattr,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Blocks    uint64            `protobuf:"varint,10,opt,name=blocks,proto3" json:"blocks,omitempty"`
	BlockSize uint64            `protobuf:"varint,11,opt,name=blockSize,proto3" json:"blockSize,omitempty"`
	FsId      []byte            `protobuf:"bytes,13,opt,name=fsId,proto3" json:"fsId,omitempty"`
}

func (m *InodeEntry) Reset()                    { *m = InodeEntry{} }
func (m *InodeEntry) String() string            { return proto1.CompactTextString(m) }
func (*InodeEntry) ProtoMessage()               {}
func (*InodeEntry) Descriptor() ([]byte, []int) { return fileDescriptorFormicApi, []int{39} }

func (m *InodeEntry) GetAttr() *Attr {
	if m != nil {
		return m.Attr
	}
	return nil
}

func (m *InodeEntry) GetXattr() map[string][]byte {
	if m != nil {
		return m.Xattr
	}
	return nil
}

// Tombstone
// Stores information needed to keep track of deleted items
type Tombstone struct {
	Dtime  int64  `protobuf:"varint,1,opt,name=dtime,proto3" json:"dtime,omitempty"`
	Qtime  int64  `protobuf:"varint,2,opt,name=qtime,proto3" json:"qtime,omitempty"`
	FsId   []byte `protobuf:"bytes,3,opt,name=fsId,proto3" json:"fsId,omitempty"`
	Inode  uint64 `protobuf:"varint,4,opt,name=inode,proto3" json:"inode,omitempty"`
	Blocks uint64 `protobuf:"varint,5,opt,name=blocks,proto3" json:"blocks,omitempty"`
}

func (m *Tombstone) Reset()                    { *m = Tombstone{} }
func (m *Tombstone) String() string            { return proto1.CompactTextString(m) }
func (*Tombstone) ProtoMessage()               {}
func (*Tombstone) Descriptor() ([]byte, []int) { return fileDescriptorFormicApi, []int{40} }

// Dirty
// Stores information needed to keep track of dirty items
type Dirty struct {
	Dtime  int64  `protobuf:"varint,1,opt,name=dtime,proto3" json:"dtime,omitempty"`
	Qtime  int64  `protobuf:"varint,2,opt,name=qtime,proto3" json:"qtime,omitempty"`
	FsId   []byte `protobuf:"bytes,3,opt,name=fsId,proto3" json:"fsId,omitempty"`
	Inode  uint64 `protobuf:"varint,4,opt,name=inode,proto3" json:"inode,omitempty"`
	Blocks uint64 `protobuf:"varint,5,opt,name=blocks,proto3" json:"blocks,omitempty"`
}

func (m *Dirty) Reset()                    { *m = Dirty{} }
func (m *Dirty) String() string            { return proto1.CompactTextString(m) }
func (*Dirty) ProtoMessage()               {}
func (*Dirty) Descriptor() ([]byte, []int) { return fileDescriptorFormicApi, []int{41} }

// DirEntry
// This is used for the serialization of dir info in the group score
// This is *not* used for api calls
type DirEntry struct {
	Version   uint32     `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Name      string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Id        []byte     `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Tombstone *Tombstone `protobuf:"bytes,4,opt,name=tombstone" json:"tombstone,omitempty"`
	Type      uint32     `protobuf:"varint,5,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *DirEntry) Reset()                    { *m = DirEntry{} }
func (m *DirEntry) String() string            { return proto1.CompactTextString(m) }
func (*DirEntry) ProtoMessage()               {}
func (*DirEntry) Descriptor() ([]byte, []int) { return fileDescriptorFormicApi, []int{42} }

func (m *DirEntry) GetTombstone() *Tombstone {
	if m != nil {
		return m.Tombstone
	}
	return nil
}

// FileBlock
// This is used for storing blocks in value store
// This is *not* used for api calls
type FileBlock struct {
	Version  uint32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Data     []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Checksum uint32 `protobuf:"varint,3,opt,name=checksum,proto3" json:"checksum,omitempty"`
}

func (m *FileBlock) Reset()                    { *m = FileBlock{} }
func (m *FileBlock) String() string            { return proto1.CompactTextString(m) }
func (*FileBlock) ProtoMessage()               {}
func (*FileBlock) Descriptor() ([]byte, []int) { return fileDescriptorFormicApi, []int{43} }

// ModFS ...
type ModFS struct {
	Name   string `protobuf:"bytes,1,opt,name=Name,json=name,proto3" json:"Name,omitempty"`
	Status string `protobuf:"bytes,2,opt,name=Status,json=status,proto3" json:"Status,omitempty"`
}

func (m *ModFS) Reset()                    { *m = ModFS{} }
func (m *ModFS) String() string            { return proto1.CompactTextString(m) }
func (*ModFS) ProtoMessage()               {}
func (*ModFS) Descriptor() ([]byte, []int) { return fileDescriptorFormicApi, []int{44} }

// Request to create a new filesystem
type CreateFSRequest struct {
	Token  string `protobuf:"bytes,1,opt,name=Token,json=token,proto3" json:"Token,omitempty"`
	FSName string `protobuf:"bytes,2,opt,name=FSName,json=fSName,proto3" json:"FSName,omitempty"`
}

func (m *CreateFSRequest) Reset()                    { *m = CreateFSRequest{} }
func (m *CreateFSRequest) String() string            { return proto1.CompactTextString(m) }
func (*CreateFSRequest) ProtoMessage()               {}
func (*CreateFSRequest) Descriptor() ([]byte, []int) { return fileDescriptorFormicApi, []int{45} }

// Response from creating a new filesystem
type CreateFSResponse struct {
	Data string `protobuf:"bytes,1,opt,name=Data,json=data,proto3" json:"Data,omitempty"`
}

func (m *CreateFSResponse) Reset()                    { *m = CreateFSResponse{} }
func (m *CreateFSResponse) String() string            { return proto1.CompactTextString(m) }
func (*CreateFSResponse) ProtoMessage()               {}
func (*CreateFSResponse) Descriptor() ([]byte, []int) { return fileDescriptorFormicApi, []int{46} }

// Request a list of all file systems for a given account
type ListFSRequest struct {
	Token string `protobuf:"bytes,1,opt,name=Token,json=token,proto3" json:"Token,omitempty"`
}

func (m *ListFSRequest) Reset()                    { *m = ListFSRequest{} }
func (m *ListFSRequest) String() string            { return proto1.CompactTextString(m) }
func (*ListFSRequest) ProtoMessage()               {}
func (*ListFSRequest) Descriptor() ([]byte, []int) { return fileDescriptorFormicApi, []int{47} }

// Response for displaying a list of all an accounts file systems.
type ListFSResponse struct {
	Data string `protobuf:"bytes,1,opt,name=Data,json=data,proto3" json:"Data,omitempty"`
}

func (m *ListFSResponse) Reset()                    { *m = ListFSResponse{} }
func (m *ListFSResponse) String() string            { return proto1.CompactTextString(m) }
func (*ListFSResponse) ProtoMessage()               {}
func (*ListFSResponse) Descriptor() ([]byte, []int) { return fileDescriptorFormicApi, []int{48} }

// Request to show the specific details about a file system
type ShowFSRequest struct {
	Token string `protobuf:"bytes,1,opt,name=Token,json=token,proto3" json:"Token,omitempty"`
	FSid  string `protobuf:"bytes,2,opt,name=FSid,json=fSid,proto3" json:"FSid,omitempty"`
}

func (m *ShowFSRequest) Reset()                    { *m = ShowFSRequest{} }
func (m *ShowFSRequest) String() string            { return proto1.CompactTextString(m) }
func (*ShowFSRequest) ProtoMessage()               {}
func (*ShowFSRequest) Descriptor() ([]byte, []int) { return fileDescriptorFormicApi, []int{49} }

// Response for a specific file system for an account.
type ShowFSResponse struct {
	Data string `protobuf:"bytes,1,opt,name=Data,json=data,proto3" json:"Data,omitempty"`
}

func (m *ShowFSResponse) Reset()                    { *m = ShowFSResponse{} }
func (m *ShowFSResponse) String() string            { return proto1.CompactTextString(m) }
func (*ShowFSResponse) ProtoMessage()               {}
func (*ShowFSResponse) Descriptor() ([]byte, []int) { return fileDescriptorFormicApi, []int{50} }

// Request to delete a specific file system
type DeleteFSRequest struct {
	Token string `protobuf:"bytes,1,opt,name=Token,json=token,proto3" json:"Token,omitempty"`
	FSid  string `protobuf:"bytes,2,opt,name=FSid,json=fSid,proto3" json:"FSid,omitempty"`
}

func (m *DeleteFSRequest) Reset()                    { *m = DeleteFSRequest{} }
func (m *DeleteFSRequest) String() string            { return proto1.CompactTextString(m) }
func (*DeleteFSRequest) ProtoMessage()               {}
func (*DeleteFSRequest) Descriptor() ([]byte, []int) { return fileDescriptorFormicApi, []int{51} }

// Response from deleting a file system
type DeleteFSResponse struct {
	Data string `protobuf:"bytes,1,opt,name=Data,json=data,proto3" json:"Data,omitempty"`
}

func (m *DeleteFSResponse) Reset()                    { *m = DeleteFSResponse{} }
func (m *DeleteFSResponse) String() string            { return proto1.CompactTextString(m) }
func (*DeleteFSResponse) ProtoMessage()               {}
func (*DeleteFSResponse) Descriptor() ([]byte, []int) { return fileDescriptorFormicApi, []int{52} }

// Request to update a specific file system's information
type UpdateFSRequest struct {
	Token   string `protobuf:"bytes,1,opt,name=Token,json=token,proto3" json:"Token,omitempty"`
	FSid    string `protobuf:"bytes,2,opt,name=FSid,json=fSid,proto3" json:"FSid,omitempty"`
	Filesys *ModFS `protobuf:"bytes,4,opt,name=Filesys,json=filesys" json:"Filesys,omitempty"`
}

func (m *UpdateFSRequest) Reset()                    { *m = UpdateFSRequest{} }
func (m *UpdateFSRequest) String() string            { return proto1.CompactTextString(m) }
func (*UpdateFSRequest) ProtoMessage()               {}
func (*UpdateFSRequest) Descriptor() ([]byte, []int) { return fileDescriptorFormicApi, []int{53} }

func (m *UpdateFSRequest) GetFilesys() *ModFS {
	if m != nil {
		return m.Filesys
	}
	return nil
}

// Response from an update operation
type UpdateFSResponse struct {
	Data string `protobuf:"bytes,1,opt,name=Data,json=data,proto3" json:"Data,omitempty"`
}

func (m *UpdateFSResponse) Reset()                    { *m = UpdateFSResponse{} }
func (m *UpdateFSResponse) String() string            { return proto1.CompactTextString(m) }
func (*UpdateFSResponse) ProtoMessage()               {}
func (*UpdateFSResponse) Descriptor() ([]byte, []int) { return fileDescriptorFormicApi, []int{54} }

// Request grant an ip address access to a file system
type GrantAddrFSRequest struct {
	Token string `protobuf:"bytes,1,opt,name=Token,json=token,proto3" json:"Token,omitempty"`
	FSid  string `protobuf:"bytes,2,opt,name=FSid,json=fSid,proto3" json:"FSid,omitempty"`
	Addr  string `protobuf:"bytes,3,opt,name=Addr,json=addr,proto3" json:"Addr,omitempty"`
}

func (m *GrantAddrFSRequest) Reset()                    { *m = GrantAddrFSRequest{} }
func (m *GrantAddrFSRequest) String() string            { return proto1.CompactTextString(m) }
func (*GrantAddrFSRequest) ProtoMessage()               {}
func (*GrantAddrFSRequest) Descriptor() ([]byte, []int) { return fileDescriptorFormicApi, []int{55} }

// Response from granting ip address access to a file system
type GrantAddrFSResponse struct {
	Data string `protobuf:"bytes,1,opt,name=Data,json=data,proto3" json:"Data,omitempty"`
}

func (m *GrantAddrFSResponse) Reset()                    { *m = GrantAddrFSResponse{} }
func (m *GrantAddrFSResponse) String() string            { return proto1.CompactTextString(m) }
func (*GrantAddrFSResponse) ProtoMessage()               {}
func (*GrantAddrFSResponse) Descriptor() ([]byte, []int) { return fileDescriptorFormicApi, []int{56} }

// Request revoke an ip address access to a file system
type RevokeAddrFSRequest struct {
	Token string `protobuf:"bytes,1,opt,name=Token,json=token,proto3" json:"Token,omitempty"`
	FSid  string `protobuf:"bytes,2,opt,name=FSid,json=fSid,proto3" json:"FSid,omitempty"`
	Addr  string `protobuf:"bytes,3,opt,name=Addr,json=addr,proto3" json:"Addr,omitempty"`
}

func (m *RevokeAddrFSRequest) Reset()                    { *m = RevokeAddrFSRequest{} }
func (m *RevokeAddrFSRequest) String() string            { return proto1.CompactTextString(m) }
func (*RevokeAddrFSRequest) ProtoMessage()               {}
func (*RevokeAddrFSRequest) Descriptor() ([]byte, []int) { return fileDescriptorFormicApi, []int{57} }

// Response from revoking ip address access to a file system
type RevokeAddrFSResponse struct {
	Data string `protobuf:"bytes,1,opt,name=Data,json=data,proto3" json:"Data,omitempty"`
}

func (m *RevokeAddrFSResponse) Reset()                    { *m = RevokeAddrFSResponse{} }
func (m *RevokeAddrFSResponse) String() string            { return proto1.CompactTextString(m) }
func (*RevokeAddrFSResponse) ProtoMessage()               {}
func (*RevokeAddrFSResponse) Descriptor() ([]byte, []int) { return fileDescriptorFormicApi, []int{58} }

func init() {
	proto1.RegisterType((*DirEnt)(nil), "proto.DirEnt")
	proto1.RegisterType((*DirEntries)(nil), "proto.DirEntries")
	proto1.RegisterType((*Attr)(nil), "proto.Attr")
	proto1.RegisterType((*SetAttrRequest)(nil), "proto.SetAttrRequest")
	proto1.RegisterType((*SetAttrResponse)(nil), "proto.SetAttrResponse")
	proto1.RegisterType((*GetAttrRequest)(nil), "proto.GetAttrRequest")
	proto1.RegisterType((*GetAttrResponse)(nil), "proto.GetAttrResponse")
	proto1.RegisterType((*ReadRequest)(nil), "proto.ReadRequest")
	proto1.RegisterType((*ReadResponse)(nil), "proto.ReadResponse")
	proto1.RegisterType((*WriteRequest)(nil), "proto.WriteRequest")
	proto1.RegisterType((*WriteResponse)(nil), "proto.WriteResponse")
	proto1.RegisterType((*MkDirRequest)(nil), "proto.MkDirRequest")
	proto1.RegisterType((*MkDirResponse)(nil), "proto.MkDirResponse")
	proto1.RegisterType((*CreateRequest)(nil), "proto.CreateRequest")
	proto1.RegisterType((*CreateResponse)(nil), "proto.CreateResponse")
	proto1.RegisterType((*RemoveRequest)(nil), "proto.RemoveRequest")
	proto1.RegisterType((*RemoveResponse)(nil), "proto.RemoveResponse")
	proto1.RegisterType((*LookupRequest)(nil), "proto.LookupRequest")
	proto1.RegisterType((*LookupResponse)(nil), "proto.LookupResponse")
	proto1.RegisterType((*ReadDirAllRequest)(nil), "proto.ReadDirAllRequest")
	proto1.RegisterType((*ReadDirAllResponse)(nil), "proto.ReadDirAllResponse")
	proto1.RegisterType((*SymlinkRequest)(nil), "proto.SymlinkRequest")
	proto1.RegisterType((*SymlinkResponse)(nil), "proto.SymlinkResponse")
	proto1.RegisterType((*ReadlinkRequest)(nil), "proto.ReadlinkRequest")
	proto1.RegisterType((*ReadlinkResponse)(nil), "proto.ReadlinkResponse")
	proto1.RegisterType((*GetxattrRequest)(nil), "proto.GetxattrRequest")
	proto1.RegisterType((*GetxattrResponse)(nil), "proto.GetxattrResponse")
	proto1.RegisterType((*SetxattrRequest)(nil), "proto.SetxattrRequest")
	proto1.RegisterType((*SetxattrResponse)(nil), "proto.SetxattrResponse")
	proto1.RegisterType((*ListxattrRequest)(nil), "proto.ListxattrRequest")
	proto1.RegisterType((*ListxattrResponse)(nil), "proto.ListxattrResponse")
	proto1.RegisterType((*RemovexattrRequest)(nil), "proto.RemovexattrRequest")
	proto1.RegisterType((*RemovexattrResponse)(nil), "proto.RemovexattrResponse")
	proto1.RegisterType((*RenameRequest)(nil), "proto.RenameRequest")
	proto1.RegisterType((*RenameResponse)(nil), "proto.RenameResponse")
	proto1.RegisterType((*StatfsRequest)(nil), "proto.StatfsRequest")
	proto1.RegisterType((*StatfsResponse)(nil), "proto.StatfsResponse")
	proto1.RegisterType((*InitFsRequest)(nil), "proto.InitFsRequest")
	proto1.RegisterType((*InitFsResponse)(nil), "proto.InitFsResponse")
	proto1.RegisterType((*InodeEntry)(nil), "proto.InodeEntry")
	proto1.RegisterType((*Tombstone)(nil), "proto.Tombstone")
	proto1.RegisterType((*Dirty)(nil), "proto.Dirty")
	proto1.RegisterType((*DirEntry)(nil), "proto.DirEntry")
	proto1.RegisterType((*FileBlock)(nil), "proto.FileBlock")
	proto1.RegisterType((*ModFS)(nil), "proto.ModFS")
	proto1.RegisterType((*CreateFSRequest)(nil), "proto.CreateFSRequest")
	proto1.RegisterType((*CreateFSResponse)(nil), "proto.CreateFSResponse")
	proto1.RegisterType((*ListFSRequest)(nil), "proto.ListFSRequest")
	proto1.RegisterType((*ListFSResponse)(nil), "proto.ListFSResponse")
	proto1.RegisterType((*ShowFSRequest)(nil), "proto.ShowFSRequest")
	proto1.RegisterType((*ShowFSResponse)(nil), "proto.ShowFSResponse")
	proto1.RegisterType((*DeleteFSRequest)(nil), "proto.DeleteFSRequest")
	proto1.RegisterType((*DeleteFSResponse)(nil), "proto.DeleteFSResponse")
	proto1.RegisterType((*UpdateFSRequest)(nil), "proto.UpdateFSRequest")
	proto1.RegisterType((*UpdateFSResponse)(nil), "proto.UpdateFSResponse")
	proto1.RegisterType((*GrantAddrFSRequest)(nil), "proto.GrantAddrFSRequest")
	proto1.RegisterType((*GrantAddrFSResponse)(nil), "proto.GrantAddrFSResponse")
	proto1.RegisterType((*RevokeAddrFSRequest)(nil), "proto.RevokeAddrFSRequest")
	proto1.RegisterType((*RevokeAddrFSResponse)(nil), "proto.RevokeAddrFSResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Api service

type ApiClient interface {
	SetAttr(ctx context.Context, in *SetAttrRequest, opts ...grpc.CallOption) (*SetAttrResponse, error)
	GetAttr(ctx context.Context, in *GetAttrRequest, opts ...grpc.CallOption) (*GetAttrResponse, error)
	Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error)
	Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResponse, error)
	MkDir(ctx context.Context, in *MkDirRequest, opts ...grpc.CallOption) (*MkDirResponse, error)
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*RemoveResponse, error)
	Lookup(ctx context.Context, in *LookupRequest, opts ...grpc.CallOption) (*LookupResponse, error)
	ReadDirAll(ctx context.Context, in *ReadDirAllRequest, opts ...grpc.CallOption) (*ReadDirAllResponse, error)
	Symlink(ctx context.Context, in *SymlinkRequest, opts ...grpc.CallOption) (*SymlinkResponse, error)
	Readlink(ctx context.Context, in *ReadlinkRequest, opts ...grpc.CallOption) (*ReadlinkResponse, error)
	Getxattr(ctx context.Context, in *GetxattrRequest, opts ...grpc.CallOption) (*GetxattrResponse, error)
	Setxattr(ctx context.Context, in *SetxattrRequest, opts ...grpc.CallOption) (*SetxattrResponse, error)
	Listxattr(ctx context.Context, in *ListxattrRequest, opts ...grpc.CallOption) (*ListxattrResponse, error)
	Removexattr(ctx context.Context, in *RemovexattrRequest, opts ...grpc.CallOption) (*RemovexattrResponse, error)
	Rename(ctx context.Context, in *RenameRequest, opts ...grpc.CallOption) (*RenameResponse, error)
	Statfs(ctx context.Context, in *StatfsRequest, opts ...grpc.CallOption) (*StatfsResponse, error)
	InitFs(ctx context.Context, in *InitFsRequest, opts ...grpc.CallOption) (*InitFsResponse, error)
}

type apiClient struct {
	cc *grpc.ClientConn
}

func NewApiClient(cc *grpc.ClientConn) ApiClient {
	return &apiClient{cc}
}

func (c *apiClient) SetAttr(ctx context.Context, in *SetAttrRequest, opts ...grpc.CallOption) (*SetAttrResponse, error) {
	out := new(SetAttrResponse)
	err := grpc.Invoke(ctx, "/proto.Api/SetAttr", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetAttr(ctx context.Context, in *GetAttrRequest, opts ...grpc.CallOption) (*GetAttrResponse, error) {
	out := new(GetAttrResponse)
	err := grpc.Invoke(ctx, "/proto.Api/GetAttr", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error) {
	out := new(ReadResponse)
	err := grpc.Invoke(ctx, "/proto.Api/Read", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResponse, error) {
	out := new(WriteResponse)
	err := grpc.Invoke(ctx, "/proto.Api/Write", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) MkDir(ctx context.Context, in *MkDirRequest, opts ...grpc.CallOption) (*MkDirResponse, error) {
	out := new(MkDirResponse)
	err := grpc.Invoke(ctx, "/proto.Api/MkDir", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := grpc.Invoke(ctx, "/proto.Api/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*RemoveResponse, error) {
	out := new(RemoveResponse)
	err := grpc.Invoke(ctx, "/proto.Api/Remove", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) Lookup(ctx context.Context, in *LookupRequest, opts ...grpc.CallOption) (*LookupResponse, error) {
	out := new(LookupResponse)
	err := grpc.Invoke(ctx, "/proto.Api/Lookup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) ReadDirAll(ctx context.Context, in *ReadDirAllRequest, opts ...grpc.CallOption) (*ReadDirAllResponse, error) {
	out := new(ReadDirAllResponse)
	err := grpc.Invoke(ctx, "/proto.Api/ReadDirAll", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) Symlink(ctx context.Context, in *SymlinkRequest, opts ...grpc.CallOption) (*SymlinkResponse, error) {
	out := new(SymlinkResponse)
	err := grpc.Invoke(ctx, "/proto.Api/Symlink", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) Readlink(ctx context.Context, in *ReadlinkRequest, opts ...grpc.CallOption) (*ReadlinkResponse, error) {
	out := new(ReadlinkResponse)
	err := grpc.Invoke(ctx, "/proto.Api/Readlink", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) Getxattr(ctx context.Context, in *GetxattrRequest, opts ...grpc.CallOption) (*GetxattrResponse, error) {
	out := new(GetxattrResponse)
	err := grpc.Invoke(ctx, "/proto.Api/Getxattr", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) Setxattr(ctx context.Context, in *SetxattrRequest, opts ...grpc.CallOption) (*SetxattrResponse, error) {
	out := new(SetxattrResponse)
	err := grpc.Invoke(ctx, "/proto.Api/Setxattr", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) Listxattr(ctx context.Context, in *ListxattrRequest, opts ...grpc.CallOption) (*ListxattrResponse, error) {
	out := new(ListxattrResponse)
	err := grpc.Invoke(ctx, "/proto.Api/Listxattr", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) Removexattr(ctx context.Context, in *RemovexattrRequest, opts ...grpc.CallOption) (*RemovexattrResponse, error) {
	out := new(RemovexattrResponse)
	err := grpc.Invoke(ctx, "/proto.Api/Removexattr", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) Rename(ctx context.Context, in *RenameRequest, opts ...grpc.CallOption) (*RenameResponse, error) {
	out := new(RenameResponse)
	err := grpc.Invoke(ctx, "/proto.Api/Rename", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) Statfs(ctx context.Context, in *StatfsRequest, opts ...grpc.CallOption) (*StatfsResponse, error) {
	out := new(StatfsResponse)
	err := grpc.Invoke(ctx, "/proto.Api/Statfs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) InitFs(ctx context.Context, in *InitFsRequest, opts ...grpc.CallOption) (*InitFsResponse, error) {
	out := new(InitFsResponse)
	err := grpc.Invoke(ctx, "/proto.Api/InitFs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Api service

type ApiServer interface {
	SetAttr(context.Context, *SetAttrRequest) (*SetAttrResponse, error)
	GetAttr(context.Context, *GetAttrRequest) (*GetAttrResponse, error)
	Read(context.Context, *ReadRequest) (*ReadResponse, error)
	Write(context.Context, *WriteRequest) (*WriteResponse, error)
	MkDir(context.Context, *MkDirRequest) (*MkDirResponse, error)
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	Remove(context.Context, *RemoveRequest) (*RemoveResponse, error)
	Lookup(context.Context, *LookupRequest) (*LookupResponse, error)
	ReadDirAll(context.Context, *ReadDirAllRequest) (*ReadDirAllResponse, error)
	Symlink(context.Context, *SymlinkRequest) (*SymlinkResponse, error)
	Readlink(context.Context, *ReadlinkRequest) (*ReadlinkResponse, error)
	Getxattr(context.Context, *GetxattrRequest) (*GetxattrResponse, error)
	Setxattr(context.Context, *SetxattrRequest) (*SetxattrResponse, error)
	Listxattr(context.Context, *ListxattrRequest) (*ListxattrResponse, error)
	Removexattr(context.Context, *RemovexattrRequest) (*RemovexattrResponse, error)
	Rename(context.Context, *RenameRequest) (*RenameResponse, error)
	Statfs(context.Context, *StatfsRequest) (*StatfsResponse, error)
	InitFs(context.Context, *InitFsRequest) (*InitFsResponse, error)
}

func RegisterApiServer(s *grpc.Server, srv ApiServer) {
	s.RegisterService(&_Api_serviceDesc, srv)
}

func _Api_SetAttr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAttrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).SetAttr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Api/SetAttr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).SetAttr(ctx, req.(*SetAttrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetAttr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAttrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetAttr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Api/GetAttr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetAttr(ctx, req.(*GetAttrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Api/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).Read(ctx, req.(*ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Api/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).Write(ctx, req.(*WriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_MkDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MkDirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).MkDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Api/MkDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).MkDir(ctx, req.(*MkDirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Api/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Api/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).Remove(ctx, req.(*RemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_Lookup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).Lookup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Api/Lookup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).Lookup(ctx, req.(*LookupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_ReadDirAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadDirAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).ReadDirAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Api/ReadDirAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).ReadDirAll(ctx, req.(*ReadDirAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_Symlink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SymlinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).Symlink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Api/Symlink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).Symlink(ctx, req.(*SymlinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_Readlink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadlinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).Readlink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Api/Readlink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).Readlink(ctx, req.(*ReadlinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_Getxattr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetxattrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).Getxattr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Api/Getxattr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).Getxattr(ctx, req.(*GetxattrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_Setxattr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetxattrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).Setxattr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Api/Setxattr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).Setxattr(ctx, req.(*SetxattrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_Listxattr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListxattrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).Listxattr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Api/Listxattr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).Listxattr(ctx, req.(*ListxattrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_Removexattr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovexattrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).Removexattr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Api/Removexattr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).Removexattr(ctx, req.(*RemovexattrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_Rename_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).Rename(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Api/Rename",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).Rename(ctx, req.(*RenameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_Statfs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatfsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).Statfs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Api/Statfs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).Statfs(ctx, req.(*StatfsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_InitFs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitFsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).InitFs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Api/InitFs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).InitFs(ctx, req.(*InitFsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Api_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Api",
	HandlerType: (*ApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetAttr",
			Handler:    _Api_SetAttr_Handler,
		},
		{
			MethodName: "GetAttr",
			Handler:    _Api_GetAttr_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _Api_Read_Handler,
		},
		{
			MethodName: "Write",
			Handler:    _Api_Write_Handler,
		},
		{
			MethodName: "MkDir",
			Handler:    _Api_MkDir_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Api_Create_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _Api_Remove_Handler,
		},
		{
			MethodName: "Lookup",
			Handler:    _Api_Lookup_Handler,
		},
		{
			MethodName: "ReadDirAll",
			Handler:    _Api_ReadDirAll_Handler,
		},
		{
			MethodName: "Symlink",
			Handler:    _Api_Symlink_Handler,
		},
		{
			MethodName: "Readlink",
			Handler:    _Api_Readlink_Handler,
		},
		{
			MethodName: "Getxattr",
			Handler:    _Api_Getxattr_Handler,
		},
		{
			MethodName: "Setxattr",
			Handler:    _Api_Setxattr_Handler,
		},
		{
			MethodName: "Listxattr",
			Handler:    _Api_Listxattr_Handler,
		},
		{
			MethodName: "Removexattr",
			Handler:    _Api_Removexattr_Handler,
		},
		{
			MethodName: "Rename",
			Handler:    _Api_Rename_Handler,
		},
		{
			MethodName: "Statfs",
			Handler:    _Api_Statfs_Handler,
		},
		{
			MethodName: "InitFs",
			Handler:    _Api_InitFs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptorFormicApi,
}

// Client API for FileSystemAPI service

type FileSystemAPIClient interface {
	CreateFS(ctx context.Context, in *CreateFSRequest, opts ...grpc.CallOption) (*CreateFSResponse, error)
	ListFS(ctx context.Context, in *ListFSRequest, opts ...grpc.CallOption) (*ListFSResponse, error)
	ShowFS(ctx context.Context, in *ShowFSRequest, opts ...grpc.CallOption) (*ShowFSResponse, error)
	DeleteFS(ctx context.Context, in *DeleteFSRequest, opts ...grpc.CallOption) (*DeleteFSResponse, error)
	UpdateFS(ctx context.Context, in *UpdateFSRequest, opts ...grpc.CallOption) (*UpdateFSResponse, error)
	GrantAddrFS(ctx context.Context, in *GrantAddrFSRequest, opts ...grpc.CallOption) (*GrantAddrFSResponse, error)
	RevokeAddrFS(ctx context.Context, in *RevokeAddrFSRequest, opts ...grpc.CallOption) (*RevokeAddrFSResponse, error)
}

type fileSystemAPIClient struct {
	cc *grpc.ClientConn
}

func NewFileSystemAPIClient(cc *grpc.ClientConn) FileSystemAPIClient {
	return &fileSystemAPIClient{cc}
}

func (c *fileSystemAPIClient) CreateFS(ctx context.Context, in *CreateFSRequest, opts ...grpc.CallOption) (*CreateFSResponse, error) {
	out := new(CreateFSResponse)
	err := grpc.Invoke(ctx, "/proto.FileSystemAPI/CreateFS", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileSystemAPIClient) ListFS(ctx context.Context, in *ListFSRequest, opts ...grpc.CallOption) (*ListFSResponse, error) {
	out := new(ListFSResponse)
	err := grpc.Invoke(ctx, "/proto.FileSystemAPI/ListFS", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileSystemAPIClient) ShowFS(ctx context.Context, in *ShowFSRequest, opts ...grpc.CallOption) (*ShowFSResponse, error) {
	out := new(ShowFSResponse)
	err := grpc.Invoke(ctx, "/proto.FileSystemAPI/ShowFS", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileSystemAPIClient) DeleteFS(ctx context.Context, in *DeleteFSRequest, opts ...grpc.CallOption) (*DeleteFSResponse, error) {
	out := new(DeleteFSResponse)
	err := grpc.Invoke(ctx, "/proto.FileSystemAPI/DeleteFS", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileSystemAPIClient) UpdateFS(ctx context.Context, in *UpdateFSRequest, opts ...grpc.CallOption) (*UpdateFSResponse, error) {
	out := new(UpdateFSResponse)
	err := grpc.Invoke(ctx, "/proto.FileSystemAPI/UpdateFS", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileSystemAPIClient) GrantAddrFS(ctx context.Context, in *GrantAddrFSRequest, opts ...grpc.CallOption) (*GrantAddrFSResponse, error) {
	out := new(GrantAddrFSResponse)
	err := grpc.Invoke(ctx, "/proto.FileSystemAPI/GrantAddrFS", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileSystemAPIClient) RevokeAddrFS(ctx context.Context, in *RevokeAddrFSRequest, opts ...grpc.CallOption) (*RevokeAddrFSResponse, error) {
	out := new(RevokeAddrFSResponse)
	err := grpc.Invoke(ctx, "/proto.FileSystemAPI/RevokeAddrFS", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FileSystemAPI service

type FileSystemAPIServer interface {
	CreateFS(context.Context, *CreateFSRequest) (*CreateFSResponse, error)
	ListFS(context.Context, *ListFSRequest) (*ListFSResponse, error)
	ShowFS(context.Context, *ShowFSRequest) (*ShowFSResponse, error)
	DeleteFS(context.Context, *DeleteFSRequest) (*DeleteFSResponse, error)
	UpdateFS(context.Context, *UpdateFSRequest) (*UpdateFSResponse, error)
	GrantAddrFS(context.Context, *GrantAddrFSRequest) (*GrantAddrFSResponse, error)
	RevokeAddrFS(context.Context, *RevokeAddrFSRequest) (*RevokeAddrFSResponse, error)
}

func RegisterFileSystemAPIServer(s *grpc.Server, srv FileSystemAPIServer) {
	s.RegisterService(&_FileSystemAPI_serviceDesc, srv)
}

func _FileSystemAPI_CreateFS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSystemAPIServer).CreateFS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FileSystemAPI/CreateFS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSystemAPIServer).CreateFS(ctx, req.(*CreateFSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileSystemAPI_ListFS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSystemAPIServer).ListFS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FileSystemAPI/ListFS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSystemAPIServer).ListFS(ctx, req.(*ListFSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileSystemAPI_ShowFS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowFSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSystemAPIServer).ShowFS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FileSystemAPI/ShowFS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSystemAPIServer).ShowFS(ctx, req.(*ShowFSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileSystemAPI_DeleteFS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSystemAPIServer).DeleteFS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FileSystemAPI/DeleteFS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSystemAPIServer).DeleteFS(ctx, req.(*DeleteFSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileSystemAPI_UpdateFS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSystemAPIServer).UpdateFS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FileSystemAPI/UpdateFS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSystemAPIServer).UpdateFS(ctx, req.(*UpdateFSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileSystemAPI_GrantAddrFS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrantAddrFSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSystemAPIServer).GrantAddrFS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FileSystemAPI/GrantAddrFS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSystemAPIServer).GrantAddrFS(ctx, req.(*GrantAddrFSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileSystemAPI_RevokeAddrFS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeAddrFSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSystemAPIServer).RevokeAddrFS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FileSystemAPI/RevokeAddrFS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSystemAPIServer).RevokeAddrFS(ctx, req.(*RevokeAddrFSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FileSystemAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.FileSystemAPI",
	HandlerType: (*FileSystemAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFS",
			Handler:    _FileSystemAPI_CreateFS_Handler,
		},
		{
			MethodName: "ListFS",
			Handler:    _FileSystemAPI_ListFS_Handler,
		},
		{
			MethodName: "ShowFS",
			Handler:    _FileSystemAPI_ShowFS_Handler,
		},
		{
			MethodName: "DeleteFS",
			Handler:    _FileSystemAPI_DeleteFS_Handler,
		},
		{
			MethodName: "UpdateFS",
			Handler:    _FileSystemAPI_UpdateFS_Handler,
		},
		{
			MethodName: "GrantAddrFS",
			Handler:    _FileSystemAPI_GrantAddrFS_Handler,
		},
		{
			MethodName: "RevokeAddrFS",
			Handler:    _FileSystemAPI_RevokeAddrFS_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptorFormicApi,
}

func (m *DirEnt) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DirEnt) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintFormicApi(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if m.Parent != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.Parent))
	}
	if m.Type != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.Type))
	}
	return i, nil
}

func (m *DirEntries) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DirEntries) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DirEntries) > 0 {
		for _, msg := range m.DirEntries {
			data[i] = 0xa
			i++
			i = encodeVarintFormicApi(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Attr) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Attr) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Inode != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.Inode))
	}
	if m.Atime != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.Atime))
	}
	if m.Mtime != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.Mtime))
	}
	if m.Ctime != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.Ctime))
	}
	if m.Crtime != 0 {
		data[i] = 0x28
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.Crtime))
	}
	if m.Mode != 0 {
		data[i] = 0x30
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.Mode))
	}
	if m.Valid != 0 {
		data[i] = 0x38
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.Valid))
	}
	if m.Size_ != 0 {
		data[i] = 0x40
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.Size_))
	}
	if m.Uid != 0 {
		data[i] = 0x48
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.Uid))
	}
	if m.Gid != 0 {
		data[i] = 0x50
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.Gid))
	}
	return i, nil
}

func (m *SetAttrRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SetAttrRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Attr != nil {
		data[i] = 0xa
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.Attr.Size()))
		n1, err := m.Attr.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Valid != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.Valid))
	}
	return i, nil
}

func (m *SetAttrResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SetAttrResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Attr != nil {
		data[i] = 0xa
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.Attr.Size()))
		n2, err := m.Attr.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *GetAttrRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GetAttrRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Inode != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.Inode))
	}
	return i, nil
}

func (m *GetAttrResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GetAttrResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Attr != nil {
		data[i] = 0xa
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.Attr.Size()))
		n3, err := m.Attr.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *ReadRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ReadRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Inode != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.Inode))
	}
	if m.Offset != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.Offset))
	}
	if m.Size_ != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.Size_))
	}
	return i, nil
}

func (m *ReadResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ReadResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Inode != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.Inode))
	}
	if len(m.Payload) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintFormicApi(data, i, uint64(len(m.Payload)))
		i += copy(data[i:], m.Payload)
	}
	return i, nil
}

func (m *WriteRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *WriteRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Inode != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.Inode))
	}
	if m.Offset != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.Offset))
	}
	if len(m.Payload) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintFormicApi(data, i, uint64(len(m.Payload)))
		i += copy(data[i:], m.Payload)
	}
	return i, nil
}

func (m *WriteResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *WriteResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.Status))
	}
	return i, nil
}

func (m *MkDirRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *MkDirRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Parent != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.Parent))
	}
	if len(m.Name) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintFormicApi(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if m.Attr != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.Attr.Size()))
		n4, err := m.Attr.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *MkDirResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *MkDirResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintFormicApi(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if m.Attr != nil {
		data[i] = 0x12
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.Attr.Size()))
		n5, err := m.Attr.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *CreateRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreateRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Parent != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.Parent))
	}
	if len(m.Name) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintFormicApi(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if m.Attr != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.Attr.Size()))
		n6, err := m.Attr.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *CreateResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreateResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintFormicApi(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if m.Attr != nil {
		data[i] = 0x12
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.Attr.Size()))
		n7, err := m.Attr.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *RemoveRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *RemoveRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Parent != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.Parent))
	}
	if len(m.Name) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintFormicApi(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	return i, nil
}

func (m *RemoveResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *RemoveResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.Status))
	}
	return i, nil
}

func (m *LookupRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *LookupRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Parent != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.Parent))
	}
	if len(m.Name) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintFormicApi(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	return i, nil
}

func (m *LookupResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *LookupResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintFormicApi(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if m.Attr != nil {
		data[i] = 0x12
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.Attr.Size()))
		n8, err := m.Attr.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *ReadDirAllRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ReadDirAllRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Inode != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.Inode))
	}
	return i, nil
}

func (m *ReadDirAllResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ReadDirAllResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DirEntries) > 0 {
		for _, msg := range m.DirEntries {
			data[i] = 0xa
			i++
			i = encodeVarintFormicApi(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SymlinkRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SymlinkRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Parent != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.Parent))
	}
	if len(m.Name) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintFormicApi(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if len(m.Target) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintFormicApi(data, i, uint64(len(m.Target)))
		i += copy(data[i:], m.Target)
	}
	if m.Uid != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.Uid))
	}
	if m.Gid != 0 {
		data[i] = 0x28
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.Gid))
	}
	return i, nil
}

func (m *SymlinkResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SymlinkResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Parent != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.Parent))
	}
	if len(m.Name) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintFormicApi(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if m.Attr != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.Attr.Size()))
		n9, err := m.Attr.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}

func (m *ReadlinkRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ReadlinkRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Inode != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.Inode))
	}
	return i, nil
}

func (m *ReadlinkResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ReadlinkResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Target) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintFormicApi(data, i, uint64(len(m.Target)))
		i += copy(data[i:], m.Target)
	}
	return i, nil
}

func (m *GetxattrRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GetxattrRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Inode != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.Inode))
	}
	if len(m.Name) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintFormicApi(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if m.Size_ != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.Size_))
	}
	if m.Position != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.Position))
	}
	return i, nil
}

func (m *GetxattrResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GetxattrResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Xattr) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintFormicApi(data, i, uint64(len(m.Xattr)))
		i += copy(data[i:], m.Xattr)
	}
	return i, nil
}

func (m *SetxattrRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SetxattrRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Inode != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.Inode))
	}
	if len(m.Name) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintFormicApi(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if len(m.Value) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintFormicApi(data, i, uint64(len(m.Value)))
		i += copy(data[i:], m.Value)
	}
	if m.Position != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.Position))
	}
	if m.Flags != 0 {
		data[i] = 0x28
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.Flags))
	}
	return i, nil
}

func (m *SetxattrResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SetxattrResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ListxattrRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ListxattrRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Inode != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.Inode))
	}
	if m.Size_ != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.Size_))
	}
	if m.Position != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.Position))
	}
	return i, nil
}

func (m *ListxattrResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ListxattrResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Xattr) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintFormicApi(data, i, uint64(len(m.Xattr)))
		i += copy(data[i:], m.Xattr)
	}
	return i, nil
}

func (m *RemovexattrRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *RemovexattrRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Inode != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.Inode))
	}
	if len(m.Name) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintFormicApi(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	return i, nil
}

func (m *RemovexattrResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *RemovexattrResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *RenameRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *RenameRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OldParent != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.OldParent))
	}
	if m.NewParent != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.NewParent))
	}
	if len(m.OldName) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintFormicApi(data, i, uint64(len(m.OldName)))
		i += copy(data[i:], m.OldName)
	}
	if len(m.NewName) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintFormicApi(data, i, uint64(len(m.NewName)))
		i += copy(data[i:], m.NewName)
	}
	return i, nil
}

func (m *RenameResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *RenameResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *StatfsRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *StatfsRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *StatfsResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *StatfsResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Blocks != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.Blocks))
	}
	if m.Bfree != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.Bfree))
	}
	if m.Bavail != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.Bavail))
	}
	if m.Files != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.Files))
	}
	if m.Ffree != 0 {
		data[i] = 0x28
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.Ffree))
	}
	if m.Bsize != 0 {
		data[i] = 0x30
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.Bsize))
	}
	if m.Namelen != 0 {
		data[i] = 0x38
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.Namelen))
	}
	if m.Frsize != 0 {
		data[i] = 0x40
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.Frsize))
	}
	return i, nil
}

func (m *InitFsRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *InitFsRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *InitFsResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *InitFsResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *InodeEntry) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *InodeEntry) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.Version))
	}
	if m.IsDir {
		data[i] = 0x10
		i++
		if m.IsDir {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.Attr != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.Attr.Size()))
		n10, err := m.Attr.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.Parent != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.Parent))
	}
	if m.Inode != 0 {
		data[i] = 0x28
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.Inode))
	}
	if m.NodeCount != 0 {
		data[i] = 0x30
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.NodeCount))
	}
	if m.IsLink {
		data[i] = 0x38
		i++
		if m.IsLink {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if len(m.Target) > 0 {
		data[i] = 0x42
		i++
		i = encodeVarintFormicApi(data, i, uint64(len(m.Target)))
		i += copy(data[i:], m.Target)
	}
	if len(m.Xattr) > 0 {
		for k, _ := range m.Xattr {
			data[i] = 0x4a
			i++
			v := m.Xattr[k]
			byteSize := 0
			if len(v) > 0 {
				byteSize = 1 + len(v) + sovFormicApi(uint64(len(v)))
			}
			mapSize := 1 + len(k) + sovFormicApi(uint64(len(k))) + byteSize
			i = encodeVarintFormicApi(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintFormicApi(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			if len(v) > 0 {
				data[i] = 0x12
				i++
				i = encodeVarintFormicApi(data, i, uint64(len(v)))
				i += copy(data[i:], v)
			}
		}
	}
	if m.Blocks != 0 {
		data[i] = 0x50
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.Blocks))
	}
	if m.BlockSize != 0 {
		data[i] = 0x58
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.BlockSize))
	}
	if len(m.FsId) > 0 {
		data[i] = 0x6a
		i++
		i = encodeVarintFormicApi(data, i, uint64(len(m.FsId)))
		i += copy(data[i:], m.FsId)
	}
	return i, nil
}

func (m *Tombstone) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Tombstone) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Dtime != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.Dtime))
	}
	if m.Qtime != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.Qtime))
	}
	if len(m.FsId) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintFormicApi(data, i, uint64(len(m.FsId)))
		i += copy(data[i:], m.FsId)
	}
	if m.Inode != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.Inode))
	}
	if m.Blocks != 0 {
		data[i] = 0x28
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.Blocks))
	}
	return i, nil
}

func (m *Dirty) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Dirty) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Dtime != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.Dtime))
	}
	if m.Qtime != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.Qtime))
	}
	if len(m.FsId) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintFormicApi(data, i, uint64(len(m.FsId)))
		i += copy(data[i:], m.FsId)
	}
	if m.Inode != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.Inode))
	}
	if m.Blocks != 0 {
		data[i] = 0x28
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.Blocks))
	}
	return i, nil
}

func (m *DirEntry) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DirEntry) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.Version))
	}
	if len(m.Name) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintFormicApi(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if len(m.Id) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintFormicApi(data, i, uint64(len(m.Id)))
		i += copy(data[i:], m.Id)
	}
	if m.Tombstone != nil {
		data[i] = 0x22
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.Tombstone.Size()))
		n11, err := m.Tombstone.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.Type != 0 {
		data[i] = 0x28
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.Type))
	}
	return i, nil
}

func (m *FileBlock) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *FileBlock) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.Version))
	}
	if len(m.Data) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintFormicApi(data, i, uint64(len(m.Data)))
		i += copy(data[i:], m.Data)
	}
	if m.Checksum != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.Checksum))
	}
	return i, nil
}

func (m *ModFS) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ModFS) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintFormicApi(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if len(m.Status) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintFormicApi(data, i, uint64(len(m.Status)))
		i += copy(data[i:], m.Status)
	}
	return i, nil
}

func (m *CreateFSRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreateFSRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintFormicApi(data, i, uint64(len(m.Token)))
		i += copy(data[i:], m.Token)
	}
	if len(m.FSName) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintFormicApi(data, i, uint64(len(m.FSName)))
		i += copy(data[i:], m.FSName)
	}
	return i, nil
}

func (m *CreateFSResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreateFSResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintFormicApi(data, i, uint64(len(m.Data)))
		i += copy(data[i:], m.Data)
	}
	return i, nil
}

func (m *ListFSRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ListFSRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintFormicApi(data, i, uint64(len(m.Token)))
		i += copy(data[i:], m.Token)
	}
	return i, nil
}

func (m *ListFSResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ListFSResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintFormicApi(data, i, uint64(len(m.Data)))
		i += copy(data[i:], m.Data)
	}
	return i, nil
}

func (m *ShowFSRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ShowFSRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintFormicApi(data, i, uint64(len(m.Token)))
		i += copy(data[i:], m.Token)
	}
	if len(m.FSid) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintFormicApi(data, i, uint64(len(m.FSid)))
		i += copy(data[i:], m.FSid)
	}
	return i, nil
}

func (m *ShowFSResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ShowFSResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintFormicApi(data, i, uint64(len(m.Data)))
		i += copy(data[i:], m.Data)
	}
	return i, nil
}

func (m *DeleteFSRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DeleteFSRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintFormicApi(data, i, uint64(len(m.Token)))
		i += copy(data[i:], m.Token)
	}
	if len(m.FSid) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintFormicApi(data, i, uint64(len(m.FSid)))
		i += copy(data[i:], m.FSid)
	}
	return i, nil
}

func (m *DeleteFSResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DeleteFSResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintFormicApi(data, i, uint64(len(m.Data)))
		i += copy(data[i:], m.Data)
	}
	return i, nil
}

func (m *UpdateFSRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *UpdateFSRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintFormicApi(data, i, uint64(len(m.Token)))
		i += copy(data[i:], m.Token)
	}
	if len(m.FSid) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintFormicApi(data, i, uint64(len(m.FSid)))
		i += copy(data[i:], m.FSid)
	}
	if m.Filesys != nil {
		data[i] = 0x22
		i++
		i = encodeVarintFormicApi(data, i, uint64(m.Filesys.Size()))
		n12, err := m.Filesys.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}

func (m *UpdateFSResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *UpdateFSResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintFormicApi(data, i, uint64(len(m.Data)))
		i += copy(data[i:], m.Data)
	}
	return i, nil
}

func (m *GrantAddrFSRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GrantAddrFSRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintFormicApi(data, i, uint64(len(m.Token)))
		i += copy(data[i:], m.Token)
	}
	if len(m.FSid) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintFormicApi(data, i, uint64(len(m.FSid)))
		i += copy(data[i:], m.FSid)
	}
	if len(m.Addr) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintFormicApi(data, i, uint64(len(m.Addr)))
		i += copy(data[i:], m.Addr)
	}
	return i, nil
}

func (m *GrantAddrFSResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GrantAddrFSResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintFormicApi(data, i, uint64(len(m.Data)))
		i += copy(data[i:], m.Data)
	}
	return i, nil
}

func (m *RevokeAddrFSRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *RevokeAddrFSRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintFormicApi(data, i, uint64(len(m.Token)))
		i += copy(data[i:], m.Token)
	}
	if len(m.FSid) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintFormicApi(data, i, uint64(len(m.FSid)))
		i += copy(data[i:], m.FSid)
	}
	if len(m.Addr) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintFormicApi(data, i, uint64(len(m.Addr)))
		i += copy(data[i:], m.Addr)
	}
	return i, nil
}

func (m *RevokeAddrFSResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *RevokeAddrFSResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintFormicApi(data, i, uint64(len(m.Data)))
		i += copy(data[i:], m.Data)
	}
	return i, nil
}

func encodeFixed64FormicApi(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32FormicApi(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintFormicApi(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *DirEnt) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFormicApi(uint64(l))
	}
	if m.Parent != 0 {
		n += 1 + sovFormicApi(uint64(m.Parent))
	}
	if m.Type != 0 {
		n += 1 + sovFormicApi(uint64(m.Type))
	}
	return n
}

func (m *DirEntries) Size() (n int) {
	var l int
	_ = l
	if len(m.DirEntries) > 0 {
		for _, e := range m.DirEntries {
			l = e.Size()
			n += 1 + l + sovFormicApi(uint64(l))
		}
	}
	return n
}

func (m *Attr) Size() (n int) {
	var l int
	_ = l
	if m.Inode != 0 {
		n += 1 + sovFormicApi(uint64(m.Inode))
	}
	if m.Atime != 0 {
		n += 1 + sovFormicApi(uint64(m.Atime))
	}
	if m.Mtime != 0 {
		n += 1 + sovFormicApi(uint64(m.Mtime))
	}
	if m.Ctime != 0 {
		n += 1 + sovFormicApi(uint64(m.Ctime))
	}
	if m.Crtime != 0 {
		n += 1 + sovFormicApi(uint64(m.Crtime))
	}
	if m.Mode != 0 {
		n += 1 + sovFormicApi(uint64(m.Mode))
	}
	if m.Valid != 0 {
		n += 1 + sovFormicApi(uint64(m.Valid))
	}
	if m.Size_ != 0 {
		n += 1 + sovFormicApi(uint64(m.Size_))
	}
	if m.Uid != 0 {
		n += 1 + sovFormicApi(uint64(m.Uid))
	}
	if m.Gid != 0 {
		n += 1 + sovFormicApi(uint64(m.Gid))
	}
	return n
}

func (m *SetAttrRequest) Size() (n int) {
	var l int
	_ = l
	if m.Attr != nil {
		l = m.Attr.Size()
		n += 1 + l + sovFormicApi(uint64(l))
	}
	if m.Valid != 0 {
		n += 1 + sovFormicApi(uint64(m.Valid))
	}
	return n
}

func (m *SetAttrResponse) Size() (n int) {
	var l int
	_ = l
	if m.Attr != nil {
		l = m.Attr.Size()
		n += 1 + l + sovFormicApi(uint64(l))
	}
	return n
}

func (m *GetAttrRequest) Size() (n int) {
	var l int
	_ = l
	if m.Inode != 0 {
		n += 1 + sovFormicApi(uint64(m.Inode))
	}
	return n
}

func (m *GetAttrResponse) Size() (n int) {
	var l int
	_ = l
	if m.Attr != nil {
		l = m.Attr.Size()
		n += 1 + l + sovFormicApi(uint64(l))
	}
	return n
}

func (m *ReadRequest) Size() (n int) {
	var l int
	_ = l
	if m.Inode != 0 {
		n += 1 + sovFormicApi(uint64(m.Inode))
	}
	if m.Offset != 0 {
		n += 1 + sovFormicApi(uint64(m.Offset))
	}
	if m.Size_ != 0 {
		n += 1 + sovFormicApi(uint64(m.Size_))
	}
	return n
}

func (m *ReadResponse) Size() (n int) {
	var l int
	_ = l
	if m.Inode != 0 {
		n += 1 + sovFormicApi(uint64(m.Inode))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovFormicApi(uint64(l))
	}
	return n
}

func (m *WriteRequest) Size() (n int) {
	var l int
	_ = l
	if m.Inode != 0 {
		n += 1 + sovFormicApi(uint64(m.Inode))
	}
	if m.Offset != 0 {
		n += 1 + sovFormicApi(uint64(m.Offset))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovFormicApi(uint64(l))
	}
	return n
}

func (m *WriteResponse) Size() (n int) {
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovFormicApi(uint64(m.Status))
	}
	return n
}

func (m *MkDirRequest) Size() (n int) {
	var l int
	_ = l
	if m.Parent != 0 {
		n += 1 + sovFormicApi(uint64(m.Parent))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFormicApi(uint64(l))
	}
	if m.Attr != nil {
		l = m.Attr.Size()
		n += 1 + l + sovFormicApi(uint64(l))
	}
	return n
}

func (m *MkDirResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFormicApi(uint64(l))
	}
	if m.Attr != nil {
		l = m.Attr.Size()
		n += 1 + l + sovFormicApi(uint64(l))
	}
	return n
}

func (m *CreateRequest) Size() (n int) {
	var l int
	_ = l
	if m.Parent != 0 {
		n += 1 + sovFormicApi(uint64(m.Parent))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFormicApi(uint64(l))
	}
	if m.Attr != nil {
		l = m.Attr.Size()
		n += 1 + l + sovFormicApi(uint64(l))
	}
	return n
}

func (m *CreateResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFormicApi(uint64(l))
	}
	if m.Attr != nil {
		l = m.Attr.Size()
		n += 1 + l + sovFormicApi(uint64(l))
	}
	return n
}

func (m *RemoveRequest) Size() (n int) {
	var l int
	_ = l
	if m.Parent != 0 {
		n += 1 + sovFormicApi(uint64(m.Parent))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFormicApi(uint64(l))
	}
	return n
}

func (m *RemoveResponse) Size() (n int) {
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovFormicApi(uint64(m.Status))
	}
	return n
}

func (m *LookupRequest) Size() (n int) {
	var l int
	_ = l
	if m.Parent != 0 {
		n += 1 + sovFormicApi(uint64(m.Parent))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFormicApi(uint64(l))
	}
	return n
}

func (m *LookupResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFormicApi(uint64(l))
	}
	if m.Attr != nil {
		l = m.Attr.Size()
		n += 1 + l + sovFormicApi(uint64(l))
	}
	return n
}

func (m *ReadDirAllRequest) Size() (n int) {
	var l int
	_ = l
	if m.Inode != 0 {
		n += 1 + sovFormicApi(uint64(m.Inode))
	}
	return n
}

func (m *ReadDirAllResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.DirEntries) > 0 {
		for _, e := range m.DirEntries {
			l = e.Size()
			n += 1 + l + sovFormicApi(uint64(l))
		}
	}
	return n
}

func (m *SymlinkRequest) Size() (n int) {
	var l int
	_ = l
	if m.Parent != 0 {
		n += 1 + sovFormicApi(uint64(m.Parent))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFormicApi(uint64(l))
	}
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovFormicApi(uint64(l))
	}
	if m.Uid != 0 {
		n += 1 + sovFormicApi(uint64(m.Uid))
	}
	if m.Gid != 0 {
		n += 1 + sovFormicApi(uint64(m.Gid))
	}
	return n
}

func (m *SymlinkResponse) Size() (n int) {
	var l int
	_ = l
	if m.Parent != 0 {
		n += 1 + sovFormicApi(uint64(m.Parent))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFormicApi(uint64(l))
	}
	if m.Attr != nil {
		l = m.Attr.Size()
		n += 1 + l + sovFormicApi(uint64(l))
	}
	return n
}

func (m *ReadlinkRequest) Size() (n int) {
	var l int
	_ = l
	if m.Inode != 0 {
		n += 1 + sovFormicApi(uint64(m.Inode))
	}
	return n
}

func (m *ReadlinkResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovFormicApi(uint64(l))
	}
	return n
}

func (m *GetxattrRequest) Size() (n int) {
	var l int
	_ = l
	if m.Inode != 0 {
		n += 1 + sovFormicApi(uint64(m.Inode))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFormicApi(uint64(l))
	}
	if m.Size_ != 0 {
		n += 1 + sovFormicApi(uint64(m.Size_))
	}
	if m.Position != 0 {
		n += 1 + sovFormicApi(uint64(m.Position))
	}
	return n
}

func (m *GetxattrResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Xattr)
	if l > 0 {
		n += 1 + l + sovFormicApi(uint64(l))
	}
	return n
}

func (m *SetxattrRequest) Size() (n int) {
	var l int
	_ = l
	if m.Inode != 0 {
		n += 1 + sovFormicApi(uint64(m.Inode))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFormicApi(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovFormicApi(uint64(l))
	}
	if m.Position != 0 {
		n += 1 + sovFormicApi(uint64(m.Position))
	}
	if m.Flags != 0 {
		n += 1 + sovFormicApi(uint64(m.Flags))
	}
	return n
}

func (m *SetxattrResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ListxattrRequest) Size() (n int) {
	var l int
	_ = l
	if m.Inode != 0 {
		n += 1 + sovFormicApi(uint64(m.Inode))
	}
	if m.Size_ != 0 {
		n += 1 + sovFormicApi(uint64(m.Size_))
	}
	if m.Position != 0 {
		n += 1 + sovFormicApi(uint64(m.Position))
	}
	return n
}

func (m *ListxattrResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Xattr)
	if l > 0 {
		n += 1 + l + sovFormicApi(uint64(l))
	}
	return n
}

func (m *RemovexattrRequest) Size() (n int) {
	var l int
	_ = l
	if m.Inode != 0 {
		n += 1 + sovFormicApi(uint64(m.Inode))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFormicApi(uint64(l))
	}
	return n
}

func (m *RemovexattrResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *RenameRequest) Size() (n int) {
	var l int
	_ = l
	if m.OldParent != 0 {
		n += 1 + sovFormicApi(uint64(m.OldParent))
	}
	if m.NewParent != 0 {
		n += 1 + sovFormicApi(uint64(m.NewParent))
	}
	l = len(m.OldName)
	if l > 0 {
		n += 1 + l + sovFormicApi(uint64(l))
	}
	l = len(m.NewName)
	if l > 0 {
		n += 1 + l + sovFormicApi(uint64(l))
	}
	return n
}

func (m *RenameResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *StatfsRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *StatfsResponse) Size() (n int) {
	var l int
	_ = l
	if m.Blocks != 0 {
		n += 1 + sovFormicApi(uint64(m.Blocks))
	}
	if m.Bfree != 0 {
		n += 1 + sovFormicApi(uint64(m.Bfree))
	}
	if m.Bavail != 0 {
		n += 1 + sovFormicApi(uint64(m.Bavail))
	}
	if m.Files != 0 {
		n += 1 + sovFormicApi(uint64(m.Files))
	}
	if m.Ffree != 0 {
		n += 1 + sovFormicApi(uint64(m.Ffree))
	}
	if m.Bsize != 0 {
		n += 1 + sovFormicApi(uint64(m.Bsize))
	}
	if m.Namelen != 0 {
		n += 1 + sovFormicApi(uint64(m.Namelen))
	}
	if m.Frsize != 0 {
		n += 1 + sovFormicApi(uint64(m.Frsize))
	}
	return n
}

func (m *InitFsRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *InitFsResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *InodeEntry) Size() (n int) {
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovFormicApi(uint64(m.Version))
	}
	if m.IsDir {
		n += 2
	}
	if m.Attr != nil {
		l = m.Attr.Size()
		n += 1 + l + sovFormicApi(uint64(l))
	}
	if m.Parent != 0 {
		n += 1 + sovFormicApi(uint64(m.Parent))
	}
	if m.Inode != 0 {
		n += 1 + sovFormicApi(uint64(m.Inode))
	}
	if m.NodeCount != 0 {
		n += 1 + sovFormicApi(uint64(m.NodeCount))
	}
	if m.IsLink {
		n += 2
	}
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovFormicApi(uint64(l))
	}
	if len(m.Xattr) > 0 {
		for k, v := range m.Xattr {
			_ = k
			_ = v
			l = 0
			if len(v) > 0 {
				l = 1 + len(v) + sovFormicApi(uint64(len(v)))
			}
			mapEntrySize := 1 + len(k) + sovFormicApi(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovFormicApi(uint64(mapEntrySize))
		}
	}
	if m.Blocks != 0 {
		n += 1 + sovFormicApi(uint64(m.Blocks))
	}
	if m.BlockSize != 0 {
		n += 1 + sovFormicApi(uint64(m.BlockSize))
	}
	l = len(m.FsId)
	if l > 0 {
		n += 1 + l + sovFormicApi(uint64(l))
	}
	return n
}

func (m *Tombstone) Size() (n int) {
	var l int
	_ = l
	if m.Dtime != 0 {
		n += 1 + sovFormicApi(uint64(m.Dtime))
	}
	if m.Qtime != 0 {
		n += 1 + sovFormicApi(uint64(m.Qtime))
	}
	l = len(m.FsId)
	if l > 0 {
		n += 1 + l + sovFormicApi(uint64(l))
	}
	if m.Inode != 0 {
		n += 1 + sovFormicApi(uint64(m.Inode))
	}
	if m.Blocks != 0 {
		n += 1 + sovFormicApi(uint64(m.Blocks))
	}
	return n
}

func (m *Dirty) Size() (n int) {
	var l int
	_ = l
	if m.Dtime != 0 {
		n += 1 + sovFormicApi(uint64(m.Dtime))
	}
	if m.Qtime != 0 {
		n += 1 + sovFormicApi(uint64(m.Qtime))
	}
	l = len(m.FsId)
	if l > 0 {
		n += 1 + l + sovFormicApi(uint64(l))
	}
	if m.Inode != 0 {
		n += 1 + sovFormicApi(uint64(m.Inode))
	}
	if m.Blocks != 0 {
		n += 1 + sovFormicApi(uint64(m.Blocks))
	}
	return n
}

func (m *DirEntry) Size() (n int) {
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovFormicApi(uint64(m.Version))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFormicApi(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovFormicApi(uint64(l))
	}
	if m.Tombstone != nil {
		l = m.Tombstone.Size()
		n += 1 + l + sovFormicApi(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovFormicApi(uint64(m.Type))
	}
	return n
}

func (m *FileBlock) Size() (n int) {
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovFormicApi(uint64(m.Version))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovFormicApi(uint64(l))
	}
	if m.Checksum != 0 {
		n += 1 + sovFormicApi(uint64(m.Checksum))
	}
	return n
}

func (m *ModFS) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFormicApi(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovFormicApi(uint64(l))
	}
	return n
}

func (m *CreateFSRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovFormicApi(uint64(l))
	}
	l = len(m.FSName)
	if l > 0 {
		n += 1 + l + sovFormicApi(uint64(l))
	}
	return n
}

func (m *CreateFSResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovFormicApi(uint64(l))
	}
	return n
}

func (m *ListFSRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovFormicApi(uint64(l))
	}
	return n
}

func (m *ListFSResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovFormicApi(uint64(l))
	}
	return n
}

func (m *ShowFSRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovFormicApi(uint64(l))
	}
	l = len(m.FSid)
	if l > 0 {
		n += 1 + l + sovFormicApi(uint64(l))
	}
	return n
}

func (m *ShowFSResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovFormicApi(uint64(l))
	}
	return n
}

func (m *DeleteFSRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovFormicApi(uint64(l))
	}
	l = len(m.FSid)
	if l > 0 {
		n += 1 + l + sovFormicApi(uint64(l))
	}
	return n
}

func (m *DeleteFSResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovFormicApi(uint64(l))
	}
	return n
}

func (m *UpdateFSRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovFormicApi(uint64(l))
	}
	l = len(m.FSid)
	if l > 0 {
		n += 1 + l + sovFormicApi(uint64(l))
	}
	if m.Filesys != nil {
		l = m.Filesys.Size()
		n += 1 + l + sovFormicApi(uint64(l))
	}
	return n
}

func (m *UpdateFSResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovFormicApi(uint64(l))
	}
	return n
}

func (m *GrantAddrFSRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovFormicApi(uint64(l))
	}
	l = len(m.FSid)
	if l > 0 {
		n += 1 + l + sovFormicApi(uint64(l))
	}
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovFormicApi(uint64(l))
	}
	return n
}

func (m *GrantAddrFSResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovFormicApi(uint64(l))
	}
	return n
}

func (m *RevokeAddrFSRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovFormicApi(uint64(l))
	}
	l = len(m.FSid)
	if l > 0 {
		n += 1 + l + sovFormicApi(uint64(l))
	}
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovFormicApi(uint64(l))
	}
	return n
}

func (m *RevokeAddrFSResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovFormicApi(uint64(l))
	}
	return n
}

func sovFormicApi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozFormicApi(x uint64) (n int) {
	return sovFormicApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DirEnt) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFormicApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DirEnt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DirEnt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFormicApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parent", wireType)
			}
			m.Parent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Parent |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Type |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFormicApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFormicApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DirEntries) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFormicApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DirEntries: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DirEntries: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DirEntries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFormicApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DirEntries = append(m.DirEntries, &DirEnt{})
			if err := m.DirEntries[len(m.DirEntries)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFormicApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFormicApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Attr) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFormicApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Attr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Attr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inode", wireType)
			}
			m.Inode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Inode |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Atime", wireType)
			}
			m.Atime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Atime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Mtime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Ctime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crtime", wireType)
			}
			m.Crtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Crtime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			m.Mode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Mode |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Valid", wireType)
			}
			m.Valid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Valid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Size_ |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Uid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gid", wireType)
			}
			m.Gid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Gid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFormicApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFormicApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetAttrRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFormicApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetAttrRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetAttrRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFormicApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attr == nil {
				m.Attr = &Attr{}
			}
			if err := m.Attr.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Valid", wireType)
			}
			m.Valid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Valid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFormicApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFormicApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetAttrResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFormicApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetAttrResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetAttrResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFormicApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attr == nil {
				m.Attr = &Attr{}
			}
			if err := m.Attr.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFormicApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFormicApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAttrRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFormicApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAttrRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAttrRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inode", wireType)
			}
			m.Inode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Inode |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFormicApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFormicApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAttrResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFormicApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAttrResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAttrResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFormicApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attr == nil {
				m.Attr = &Attr{}
			}
			if err := m.Attr.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFormicApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFormicApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReadRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFormicApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReadRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReadRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inode", wireType)
			}
			m.Inode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Inode |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Offset |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Size_ |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFormicApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFormicApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReadResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFormicApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReadResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReadResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inode", wireType)
			}
			m.Inode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Inode |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFormicApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], data[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFormicApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFormicApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WriteRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFormicApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WriteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WriteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inode", wireType)
			}
			m.Inode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Inode |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Offset |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFormicApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], data[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFormicApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFormicApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WriteResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFormicApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WriteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WriteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFormicApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFormicApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MkDirRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFormicApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MkDirRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MkDirRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parent", wireType)
			}
			m.Parent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Parent |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFormicApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFormicApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attr == nil {
				m.Attr = &Attr{}
			}
			if err := m.Attr.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFormicApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFormicApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MkDirResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFormicApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MkDirResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MkDirResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFormicApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFormicApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attr == nil {
				m.Attr = &Attr{}
			}
			if err := m.Attr.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFormicApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFormicApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFormicApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parent", wireType)
			}
			m.Parent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Parent |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFormicApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFormicApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attr == nil {
				m.Attr = &Attr{}
			}
			if err := m.Attr.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFormicApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFormicApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFormicApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFormicApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFormicApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attr == nil {
				m.Attr = &Attr{}
			}
			if err := m.Attr.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFormicApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFormicApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFormicApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parent", wireType)
			}
			m.Parent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Parent |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFormicApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFormicApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFormicApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFormicApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFormicApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFormicApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFormicApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parent", wireType)
			}
			m.Parent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Parent |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFormicApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFormicApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFormicApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFormicApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFormicApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFormicApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attr == nil {
				m.Attr = &Attr{}
			}
			if err := m.Attr.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFormicApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFormicApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReadDirAllRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFormicApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReadDirAllRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReadDirAllRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inode", wireType)
			}
			m.Inode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Inode |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFormicApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFormicApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReadDirAllResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFormicApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReadDirAllResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReadDirAllResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DirEntries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFormicApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DirEntries = append(m.DirEntries, &DirEnt{})
			if err := m.DirEntries[len(m.DirEntries)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFormicApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFormicApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SymlinkRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFormicApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SymlinkRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SymlinkRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parent", wireType)
			}
			m.Parent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Parent |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFormicApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFormicApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Uid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gid", wireType)
			}
			m.Gid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Gid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFormicApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFormicApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SymlinkResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFormicApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SymlinkResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SymlinkResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parent", wireType)
			}
			m.Parent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Parent |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFormicApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFormicApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attr == nil {
				m.Attr = &Attr{}
			}
			if err := m.Attr.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFormicApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFormicApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReadlinkRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFormicApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReadlinkRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReadlinkRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inode", wireType)
			}
			m.Inode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Inode |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFormicApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFormicApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReadlinkResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFormicApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReadlinkResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReadlinkResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFormicApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFormicApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFormicApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetxattrRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFormicApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetxattrRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetxattrRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inode", wireType)
			}
			m.Inode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Inode |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFormicApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Size_ |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			m.Position = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Position |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFormicApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFormicApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetxattrResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFormicApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetxattrResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetxattrResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Xattr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFormicApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Xattr = append(m.Xattr[:0], data[iNdEx:postIndex]...)
			if m.Xattr == nil {
				m.Xattr = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFormicApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFormicApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetxattrRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFormicApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetxattrRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetxattrRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inode", wireType)
			}
			m.Inode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Inode |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFormicApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFormicApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], data[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			m.Position = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Position |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Flags |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFormicApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFormicApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetxattrResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFormicApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetxattrResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetxattrResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFormicApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFormicApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListxattrRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFormicApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListxattrRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListxattrRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inode", wireType)
			}
			m.Inode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Inode |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Size_ |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			m.Position = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Position |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFormicApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFormicApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListxattrResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFormicApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListxattrResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListxattrResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Xattr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFormicApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Xattr = append(m.Xattr[:0], data[iNdEx:postIndex]...)
			if m.Xattr == nil {
				m.Xattr = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFormicApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFormicApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemovexattrRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFormicApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemovexattrRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemovexattrRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inode", wireType)
			}
			m.Inode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Inode |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFormicApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFormicApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFormicApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemovexattrResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFormicApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemovexattrResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemovexattrResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFormicApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFormicApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RenameRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFormicApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RenameRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RenameRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldParent", wireType)
			}
			m.OldParent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.OldParent |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewParent", wireType)
			}
			m.NewParent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.NewParent |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFormicApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OldName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFormicApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFormicApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFormicApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RenameResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFormicApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RenameResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RenameResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFormicApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFormicApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatfsRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFormicApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatfsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatfsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFormicApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFormicApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatfsResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFormicApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatfsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatfsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocks", wireType)
			}
			m.Blocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Blocks |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bfree", wireType)
			}
			m.Bfree = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Bfree |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bavail", wireType)
			}
			m.Bavail = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Bavail |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Files", wireType)
			}
			m.Files = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Files |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ffree", wireType)
			}
			m.Ffree = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Ffree |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bsize", wireType)
			}
			m.Bsize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Bsize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namelen", wireType)
			}
			m.Namelen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Namelen |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frsize", wireType)
			}
			m.Frsize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Frsize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFormicApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFormicApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InitFsRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFormicApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitFsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitFsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFormicApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFormicApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InitFsResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFormicApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitFsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitFsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFormicApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFormicApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InodeEntry) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFormicApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InodeEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InodeEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Version |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDir", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDir = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFormicApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attr == nil {
				m.Attr = &Attr{}
			}
			if err := m.Attr.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parent", wireType)
			}
			m.Parent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Parent |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inode", wireType)
			}
			m.Inode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Inode |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeCount", wireType)
			}
			m.NodeCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.NodeCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLink", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLink = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFormicApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Xattr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFormicApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthFormicApi
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(data[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.Xattr == nil {
				m.Xattr = make(map[string][]byte)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFormicApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapbyteLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFormicApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					mapbyteLen |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intMapbyteLen := int(mapbyteLen)
				if intMapbyteLen < 0 {
					return ErrInvalidLengthFormicApi
				}
				postbytesIndex := iNdEx + intMapbyteLen
				if postbytesIndex > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := make([]byte, mapbyteLen)
				copy(mapvalue, data[iNdEx:postbytesIndex])
				iNdEx = postbytesIndex
				m.Xattr[mapkey] = mapvalue
			} else {
				var mapvalue []byte
				m.Xattr[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocks", wireType)
			}
			m.Blocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Blocks |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockSize", wireType)
			}
			m.BlockSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.BlockSize |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FsId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFormicApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FsId = append(m.FsId[:0], data[iNdEx:postIndex]...)
			if m.FsId == nil {
				m.FsId = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFormicApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFormicApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tombstone) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFormicApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tombstone: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tombstone: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dtime", wireType)
			}
			m.Dtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Dtime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qtime", wireType)
			}
			m.Qtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Qtime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FsId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFormicApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FsId = append(m.FsId[:0], data[iNdEx:postIndex]...)
			if m.FsId == nil {
				m.FsId = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inode", wireType)
			}
			m.Inode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Inode |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocks", wireType)
			}
			m.Blocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Blocks |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFormicApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFormicApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Dirty) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFormicApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Dirty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Dirty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dtime", wireType)
			}
			m.Dtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Dtime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qtime", wireType)
			}
			m.Qtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Qtime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FsId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFormicApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FsId = append(m.FsId[:0], data[iNdEx:postIndex]...)
			if m.FsId == nil {
				m.FsId = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inode", wireType)
			}
			m.Inode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Inode |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocks", wireType)
			}
			m.Blocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Blocks |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFormicApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFormicApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DirEntry) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFormicApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DirEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DirEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Version |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFormicApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFormicApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], data[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tombstone", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFormicApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tombstone == nil {
				m.Tombstone = &Tombstone{}
			}
			if err := m.Tombstone.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Type |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFormicApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFormicApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FileBlock) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFormicApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Version |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFormicApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], data[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checksum", wireType)
			}
			m.Checksum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Checksum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFormicApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFormicApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModFS) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFormicApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModFS: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModFS: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFormicApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFormicApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFormicApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFormicApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateFSRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFormicApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateFSRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateFSRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFormicApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FSName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFormicApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FSName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFormicApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFormicApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateFSResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFormicApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateFSResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateFSResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFormicApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFormicApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFormicApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListFSRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFormicApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListFSRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListFSRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFormicApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFormicApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFormicApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListFSResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFormicApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListFSResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListFSResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFormicApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFormicApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFormicApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShowFSRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFormicApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShowFSRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShowFSRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFormicApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FSid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFormicApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FSid = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFormicApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFormicApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShowFSResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFormicApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShowFSResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShowFSResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFormicApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFormicApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFormicApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteFSRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFormicApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteFSRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteFSRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFormicApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FSid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFormicApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FSid = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFormicApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFormicApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteFSResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFormicApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteFSResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteFSResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFormicApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFormicApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFormicApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateFSRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFormicApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateFSRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateFSRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFormicApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FSid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFormicApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FSid = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filesys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFormicApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filesys == nil {
				m.Filesys = &ModFS{}
			}
			if err := m.Filesys.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFormicApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFormicApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateFSResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFormicApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateFSResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateFSResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFormicApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFormicApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFormicApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GrantAddrFSRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFormicApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GrantAddrFSRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GrantAddrFSRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFormicApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FSid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFormicApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FSid = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFormicApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFormicApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFormicApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GrantAddrFSResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFormicApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GrantAddrFSResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GrantAddrFSResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFormicApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFormicApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFormicApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RevokeAddrFSRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFormicApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RevokeAddrFSRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RevokeAddrFSRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFormicApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FSid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFormicApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FSid = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFormicApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFormicApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFormicApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RevokeAddrFSResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFormicApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RevokeAddrFSResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RevokeAddrFSResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFormicApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFormicApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFormicApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFormicApi(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFormicApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFormicApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthFormicApi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowFormicApi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipFormicApi(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthFormicApi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFormicApi   = fmt.Errorf("proto: integer overflow")
)

func init() { proto1.RegisterFile("formic_api.proto", fileDescriptorFormicApi) }

var fileDescriptorFormicApi = []byte{
	// 1750 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xbc, 0x18, 0x4d, 0x6f, 0x1b, 0xd5,
	0x36, 0x63, 0x8f, 0x1d, 0xfb, 0x24, 0xe3, 0xb8, 0xb7, 0x6d, 0x9e, 0xeb, 0x57, 0xe5, 0x45, 0xa3,
	0x47, 0x9a, 0x56, 0x22, 0x12, 0x29, 0x12, 0xa5, 0x11, 0x85, 0x34, 0x6e, 0x42, 0xa4, 0xb6, 0x54,
	0x33, 0x2d, 0x54, 0x02, 0x81, 0x26, 0x99, 0xeb, 0xf4, 0xca, 0xf6, 0x8c, 0x3b, 0x33, 0x4e, 0x6b,
	0x36, 0x2c, 0xd8, 0xb2, 0x61, 0xc7, 0x6f, 0xe1, 0x17, 0x20, 0x56, 0xb0, 0x63, 0x89, 0xca, 0x1f,
	0x41, 0xf7, 0xfb, 0xce, 0xc4, 0xb1, 0xa9, 0x5b, 0xb1, 0xf2, 0x9c, 0x73, 0xef, 0xf9, 0x3e, 0xf7,
	0x7c, 0x18, 0x9a, 0xdd, 0x38, 0x19, 0x90, 0xe3, 0x6f, 0x82, 0x21, 0xd9, 0x1a, 0x26, 0x71, 0x16,
	0xa3, 0x0a, 0xfb, 0x71, 0x3f, 0x85, 0x6a, 0x87, 0x24, 0xf7, 0xa2, 0x0c, 0x21, 0xb0, 0xa3, 0x60,
	0x80, 0x5b, 0xd6, 0xba, 0xb5, 0x59, 0xf7, 0xd8, 0x37, 0x5a, 0x85, 0xea, 0x30, 0x48, 0x70, 0x94,
	0xb5, 0x4a, 0xeb, 0xd6, 0xa6, 0xed, 0x09, 0x88, 0xde, 0xcd, 0xc6, 0x43, 0xdc, 0x2a, 0xaf, 0x5b,
	0x9b, 0x8e, 0xc7, 0xbe, 0xdd, 0x1d, 0x00, 0xce, 0x29, 0x21, 0x38, 0x45, 0xef, 0x9a, 0x50, 0xcb,
	0x5a, 0x2f, 0x6f, 0x2e, 0x6d, 0x3b, 0x5c, 0xf4, 0x16, 0x3f, 0xf0, 0x20, 0x54, 0x17, 0xdc, 0x3f,
	0x2c, 0xb0, 0x77, 0xb3, 0x2c, 0x41, 0x97, 0xa0, 0x42, 0xa2, 0x38, 0xe4, 0x6a, 0xd8, 0x1e, 0x07,
	0x28, 0x36, 0xc8, 0xc8, 0x00, 0x33, 0x35, 0xca, 0x1e, 0x07, 0x28, 0x76, 0xc0, 0xb0, 0x65, 0x8e,
	0x1d, 0x48, 0xec, 0x31, 0xc3, 0xda, 0x1c, 0xcb, 0x00, 0x6a, 0xc9, 0x71, 0xc2, 0xd0, 0x15, 0x86,
	0x16, 0x10, 0xb5, 0x64, 0x40, 0xc5, 0x55, 0xb9, 0x25, 0x03, 0x21, 0xed, 0x34, 0xe8, 0x93, 0xb0,
	0xb5, 0xb8, 0x6e, 0x6d, 0x56, 0x3c, 0x0e, 0xd0, 0x9b, 0x29, 0xf9, 0x16, 0xb7, 0x6a, 0x4c, 0x31,
	0xf6, 0x8d, 0x9a, 0x50, 0x1e, 0x91, 0xb0, 0x55, 0x67, 0xc4, 0xf4, 0x93, 0x62, 0x4e, 0x48, 0xd8,
	0x02, 0x8e, 0x39, 0x21, 0xa1, 0x7b, 0x00, 0x0d, 0x1f, 0x67, 0xd4, 0x38, 0x0f, 0x3f, 0x1f, 0xe1,
	0x34, 0x43, 0xff, 0x03, 0x3b, 0xc8, 0xb2, 0x84, 0x99, 0xb8, 0xb4, 0xbd, 0x24, 0xbc, 0xc2, 0x6e,
	0xb0, 0x03, 0xad, 0x40, 0x89, 0xb1, 0xe1, 0x80, 0xbb, 0x0d, 0x2b, 0x8a, 0x51, 0x3a, 0x8c, 0xa3,
	0x14, 0xcf, 0xe4, 0xe4, 0x6e, 0x40, 0xe3, 0x20, 0x2f, 0x7c, 0xa2, 0x83, 0x29, 0xef, 0x83, 0xd7,
	0xe5, 0xfd, 0x19, 0x2c, 0x79, 0x38, 0x08, 0xa7, 0x32, 0xa6, 0x7e, 0x8f, 0xbb, 0xdd, 0x14, 0x67,
	0x22, 0x74, 0x02, 0x52, 0xde, 0xe4, 0xa1, 0x63, 0xdf, 0xee, 0x1d, 0x58, 0xe6, 0x0c, 0x85, 0x06,
	0x93, 0x39, 0xb6, 0x60, 0x71, 0x18, 0x8c, 0xfb, 0x71, 0xc0, 0xdd, 0xb3, 0xec, 0x49, 0xd0, 0xfd,
	0x1c, 0x96, 0xbf, 0x48, 0x48, 0x86, 0xe7, 0xd3, 0xc8, 0xe0, 0x5b, 0xce, 0xf3, 0xbd, 0x06, 0x8e,
	0xe0, 0x2b, 0x14, 0x5b, 0x85, 0x6a, 0x9a, 0x05, 0xd9, 0x28, 0x65, 0x9c, 0x2b, 0x9e, 0x80, 0xdc,
	0x2f, 0x61, 0xf9, 0x41, 0xaf, 0x43, 0x94, 0xaf, 0xf5, 0xf3, 0xb1, 0x8a, 0xcf, 0x87, 0x3d, 0xb5,
	0x92, 0xf1, 0xd4, 0xa4, 0xbb, 0xcb, 0xe7, 0xb9, 0xbb, 0x03, 0x8e, 0x60, 0x2e, 0xb4, 0x98, 0xf4,
	0x60, 0x25, 0x97, 0xd2, 0x79, 0x5c, 0xbe, 0x02, 0x67, 0x2f, 0xc1, 0x81, 0x76, 0xd2, 0x5b, 0xd5,
	0xf1, 0x1e, 0x34, 0x24, 0xf7, 0x37, 0x51, 0x72, 0x07, 0x1c, 0x0f, 0x0f, 0xe2, 0xd3, 0x79, 0x94,
	0x74, 0x37, 0xa1, 0x21, 0x89, 0x67, 0x84, 0x6b, 0x07, 0x9c, 0xfb, 0x71, 0xdc, 0x1b, 0x0d, 0xe7,
	0x11, 0x73, 0x0f, 0x1a, 0x92, 0xf8, 0x4d, 0x4c, 0xbd, 0x0e, 0x17, 0x68, 0xce, 0x77, 0x48, 0xb2,
	0xdb, 0xef, 0x4f, 0x7f, 0xa3, 0x7b, 0x80, 0xcc, 0xab, 0x42, 0xea, 0x6b, 0x16, 0xda, 0x97, 0xd0,
	0xf0, 0xc7, 0x83, 0x3e, 0x89, 0x7a, 0xf3, 0x24, 0xc0, 0x2a, 0x54, 0xb3, 0x20, 0x39, 0xc1, 0x19,
	0x4b, 0x81, 0xba, 0x27, 0x20, 0x59, 0x07, 0xed, 0x33, 0x75, 0xb0, 0xa2, 0xeb, 0xe0, 0xd7, 0xb0,
	0xa2, 0x24, 0xeb, 0xc0, 0xbc, 0xbd, 0xdc, 0xbb, 0x06, 0x2b, 0xd4, 0x3d, 0xa6, 0x69, 0x93, 0xfd,
	0x78, 0x03, 0x9a, 0xfa, 0xa2, 0xd6, 0x44, 0x18, 0x66, 0x99, 0x86, 0xb9, 0x3d, 0x56, 0x17, 0x5f,
	0x06, 0xb3, 0x0a, 0xe8, 0x44, 0x95, 0xcd, 0x1a, 0xe7, 0x88, 0x8e, 0xd1, 0x86, 0xda, 0x30, 0x4e,
	0x49, 0x46, 0xe2, 0x48, 0xb8, 0x4b, 0xc1, 0xee, 0x26, 0x34, 0xb5, 0x30, 0x5d, 0x03, 0x5f, 0xaa,
	0x32, 0xbc, 0xec, 0x71, 0xc0, 0xfd, 0xde, 0x62, 0xbd, 0x60, 0x4e, 0xbd, 0x78, 0x7b, 0x19, 0x61,
	0x51, 0xe7, 0x38, 0x30, 0x4d, 0x33, 0x4a, 0xd1, 0xed, 0x07, 0x27, 0xa9, 0x88, 0x27, 0x07, 0x5c,
	0x04, 0x4d, 0xbf, 0xa0, 0xaf, 0xfb, 0x14, 0x9a, 0xf7, 0x49, 0xfa, 0x0f, 0x35, 0x63, 0xde, 0x29,
	0x9d, 0xe3, 0x9d, 0x72, 0xc1, 0x3b, 0xd7, 0xe1, 0x82, 0xc1, 0x79, 0xaa, 0x7b, 0xee, 0xd0, 0x97,
	0x42, 0x4b, 0xc0, 0x7c, 0x0e, 0x72, 0x2f, 0xc3, 0xc5, 0x1c, 0xbd, 0xb0, 0xed, 0x3b, 0x5a, 0x96,
	0xe8, 0x05, 0xc9, 0xf1, 0x2a, 0xd4, 0xe3, 0x7e, 0xf8, 0xc8, 0x4c, 0x61, 0x8d, 0xa0, 0xa7, 0x11,
	0x7e, 0xf1, 0xc8, 0x9c, 0x9f, 0x34, 0x82, 0xb6, 0x9b, 0xb8, 0x1f, 0x3e, 0x0c, 0xc4, 0xf8, 0x52,
	0xf7, 0x24, 0x48, 0x4f, 0x22, 0xfc, 0x82, 0x9d, 0xd8, 0xfc, 0x44, 0x80, 0x6e, 0x93, 0x96, 0x36,
	0xae, 0x80, 0x50, 0x69, 0x05, 0x1c, 0x3f, 0x0b, 0xb2, 0x6e, 0x2a, 0x54, 0x72, 0x7f, 0xb5, 0xa0,
	0x21, 0x31, 0x3a, 0xb7, 0x8f, 0xfa, 0xf1, 0x71, 0x2f, 0x95, 0xaf, 0x8c, 0x43, 0xd4, 0x1f, 0x47,
	0xdd, 0x04, 0x63, 0xa1, 0x1b, 0x07, 0xd8, 0xed, 0xe0, 0x34, 0x20, 0x7d, 0xa6, 0x16, 0xbd, 0xcd,
	0x20, 0x96, 0x02, 0xa4, 0x8f, 0x53, 0xa6, 0x93, 0xed, 0x71, 0x80, 0x61, 0x19, 0x8f, 0x8a, 0xc0,
	0x32, 0x1e, 0x94, 0x33, 0x8b, 0x2d, 0x9f, 0xaa, 0x38, 0xc0, 0xec, 0x0a, 0x06, 0xb8, 0x8f, 0x23,
	0x36, 0x58, 0x39, 0x9e, 0x04, 0xa9, 0xcc, 0x6e, 0xa2, 0x86, 0x2b, 0xc7, 0x13, 0x10, 0xb5, 0xee,
	0x30, 0x22, 0xd9, 0xbe, 0xb2, 0xae, 0x09, 0x0d, 0x89, 0x10, 0x0e, 0xf8, 0xb1, 0x0c, 0x70, 0x48,
	0x03, 0x49, 0x0b, 0xdc, 0x98, 0xca, 0x38, 0xc5, 0x49, 0x4a, 0xf3, 0xc7, 0xe2, 0x32, 0x04, 0xc8,
	0xa2, 0x9f, 0x76, 0x08, 0x2f, 0xc5, 0x35, 0x8f, 0x03, 0x33, 0xab, 0x8a, 0x51, 0xa2, 0xec, 0x5c,
	0x89, 0x52, 0xc9, 0x54, 0x31, 0x93, 0x89, 0x86, 0x3c, 0x0e, 0xf1, 0x5e, 0x3c, 0x8a, 0x32, 0x66,
	0x3c, 0x0d, 0xb9, 0x44, 0x50, 0x5e, 0x24, 0xbd, 0x4f, 0xa2, 0x1e, 0xb3, 0xbf, 0xe6, 0x09, 0xc8,
	0x28, 0x3e, 0xb5, 0x5c, 0x55, 0xdd, 0x96, 0xc9, 0x5d, 0x67, 0x55, 0xfd, 0xaa, 0xd0, 0x4e, 0x9b,
	0xbb, 0xf5, 0x94, 0x1e, 0xb3, 0x4f, 0x91, 0xfa, 0x46, 0xb0, 0x21, 0x17, 0xec, 0xab, 0x50, 0x67,
	0x5f, 0x3e, 0xf5, 0xf2, 0x12, 0xd7, 0x4c, 0x21, 0xe8, 0x23, 0xe8, 0xa6, 0x87, 0x61, 0xcb, 0x61,
	0xaf, 0x88, 0x7d, 0xb7, 0x6f, 0x01, 0x68, 0xf6, 0xb4, 0x9e, 0xf7, 0xf0, 0x58, 0x54, 0x47, 0xfa,
	0xa9, 0xab, 0x48, 0xc9, 0xa8, 0x22, 0xb7, 0x4b, 0xb7, 0x2c, 0x77, 0x0c, 0xf5, 0xc7, 0xf1, 0xe0,
	0x28, 0xcd, 0xe2, 0x88, 0xe5, 0x42, 0xc8, 0xe6, 0x6e, 0x8b, 0x8f, 0xe3, 0xa1, 0x1c, 0xd2, 0x9f,
	0x9b, 0x03, 0xfd, 0x73, 0x39, 0x8c, 0x33, 0x35, 0xca, 0x5a, 0x0d, 0xed, 0x68, 0xbb, 0x30, 0xc4,
	0x09, 0x33, 0x2b, 0xa6, 0x99, 0xee, 0x08, 0x2a, 0x1d, 0x92, 0x64, 0xe3, 0x7f, 0x59, 0xec, 0x0f,
	0x16, 0xd4, 0x44, 0x17, 0x9e, 0x96, 0x83, 0x93, 0x8a, 0x71, 0x03, 0x4a, 0x44, 0x8a, 0x2e, 0x91,
	0x10, 0x6d, 0x41, 0x3d, 0x93, 0xce, 0x63, 0xc2, 0x97, 0xb6, 0x9b, 0x22, 0xf0, 0xca, 0xa9, 0x9e,
	0xbe, 0xa2, 0x56, 0xb1, 0x8a, 0xb1, 0x8a, 0x3d, 0x81, 0xfa, 0x3e, 0xe9, 0xe3, 0xbb, 0x54, 0xb9,
	0xe9, 0xea, 0x84, 0x41, 0x16, 0x88, 0x00, 0xb2, 0x6f, 0x5a, 0x81, 0x8f, 0x9f, 0xe1, 0xe3, 0x5e,
	0x3a, 0x1a, 0xc8, 0x0a, 0x2c, 0x61, 0xf7, 0x26, 0x54, 0x1e, 0xc4, 0xe1, 0xbe, 0x4f, 0x09, 0x1f,
	0x4e, 0x58, 0x15, 0x7d, 0x3e, 0x64, 0x71, 0xeb, 0xe4, 0x90, 0xf5, 0x31, 0xac, 0xf0, 0x91, 0x70,
	0xdf, 0x37, 0x0a, 0xf1, 0xe3, 0xb8, 0x87, 0x23, 0x41, 0x5f, 0xc9, 0x28, 0x40, 0x19, 0xec, 0xfb,
	0x0f, 0xb5, 0x7b, 0xaa, 0x5d, 0x06, 0xb9, 0x1b, 0xd0, 0xd4, 0x0c, 0xf4, 0xa8, 0xd5, 0xa1, 0x9a,
	0x0b, 0x05, 0xa8, 0xe6, 0xee, 0x3b, 0xe0, 0xd0, 0xfe, 0x30, 0x43, 0x8c, 0xfb, 0x7f, 0x68, 0xc8,
	0x6b, 0x53, 0x98, 0x7d, 0x08, 0x8e, 0xff, 0x2c, 0x7e, 0x31, 0x4b, 0x67, 0x04, 0xf6, 0xbe, 0x2f,
	0xf6, 0xb4, 0xba, 0x67, 0x77, 0x7d, 0x12, 0x52, 0x01, 0x92, 0x74, 0x8a, 0x80, 0x1d, 0x58, 0xe9,
	0xe0, 0x3e, 0x9e, 0xed, 0x96, 0x49, 0x22, 0x36, 0xa0, 0xa9, 0x89, 0xa7, 0x08, 0x39, 0x86, 0x95,
	0x27, 0xc3, 0x30, 0x98, 0x4b, 0x08, 0xda, 0x80, 0x45, 0x9a, 0x44, 0xe9, 0x38, 0x15, 0x69, 0xb8,
	0x2c, 0xd2, 0x90, 0xe5, 0x80, 0xb7, 0xd8, 0xe5, 0x87, 0x54, 0x19, 0x2d, 0x64, 0x8a, 0x32, 0x1e,
	0xa0, 0x83, 0x24, 0x88, 0xb2, 0xdd, 0x30, 0x4c, 0xe6, 0xd1, 0x07, 0x81, 0x4d, 0x49, 0x45, 0xb7,
	0xb4, 0x83, 0x30, 0xa4, 0xd3, 0xf3, 0xc5, 0x1c, 0xcf, 0x29, 0xe2, 0x7d, 0xda, 0xd3, 0x4f, 0xe3,
	0x1e, 0x7e, 0x9b, 0xf2, 0x6f, 0xc0, 0xa5, 0x3c, 0xd3, 0xf3, 0x15, 0xd8, 0xfe, 0xb9, 0x06, 0xe5,
	0xdd, 0x21, 0x41, 0xb7, 0x61, 0x51, 0xac, 0xf1, 0xe8, 0xb2, 0xf0, 0x68, 0xfe, 0xff, 0x81, 0xf6,
	0x6a, 0x11, 0x2d, 0x7a, 0xdd, 0x02, 0xa5, 0x3d, 0x28, 0xd0, 0x1e, 0x4c, 0xa6, 0x3d, 0x38, 0x43,
	0xfb, 0x1e, 0xd8, 0x74, 0xec, 0x45, 0x48, 0xdc, 0x30, 0x76, 0xf7, 0xf6, 0xc5, 0x1c, 0x4e, 0x91,
	0xbc, 0x0f, 0x15, 0xb6, 0xf8, 0x22, 0x79, 0x6e, 0xae, 0xd7, 0xed, 0x4b, 0x79, 0xa4, 0x49, 0xc5,
	0x16, 0x55, 0x45, 0x65, 0xee, 0xc4, 0x8a, 0x2a, 0xb7, 0xcb, 0xba, 0x0b, 0xe8, 0x03, 0xa8, 0xf2,
	0x67, 0x8e, 0xe4, 0x8d, 0xdc, 0x9e, 0xda, 0xbe, 0x5c, 0xc0, 0x9a, 0x84, 0x7c, 0x58, 0x53, 0x84,
	0xb9, 0xdd, 0x51, 0x11, 0xe6, 0x97, 0x42, 0x4e, 0xc8, 0x37, 0x38, 0x45, 0x98, 0xdb, 0x06, 0x15,
	0x61, 0x7e, 0xcd, 0x73, 0x17, 0xd0, 0x1e, 0x80, 0x5e, 0xc4, 0x50, 0xcb, 0xf0, 0x5d, 0x6e, 0x8d,
	0x6b, 0x5f, 0x99, 0x70, 0x62, 0x86, 0x52, 0xac, 0x43, 0x3a, 0x0d, 0x72, 0x8b, 0x99, 0x4e, 0x83,
	0xfc, 0xd6, 0xe4, 0x2e, 0xa0, 0x8f, 0xa0, 0x26, 0x37, 0x18, 0xb4, 0x6a, 0x08, 0x31, 0xa9, 0xff,
	0x73, 0x06, 0x6f, 0x92, 0xcb, 0x3d, 0x03, 0x19, 0xf9, 0x62, 0x0e, 0xcb, 0x8a, 0xbc, 0xb8, 0x90,
	0x70, 0x72, 0xbf, 0x48, 0xee, 0x9f, 0x43, 0xee, 0x9f, 0x25, 0xff, 0x04, 0xea, 0x6a, 0x8e, 0x47,
	0xf2, 0x5e, 0x71, 0x67, 0x68, 0xb7, 0xce, 0x1e, 0x28, 0x0e, 0xfb, 0xb0, 0x64, 0x8c, 0xe7, 0xe8,
	0x4a, 0x2e, 0xc0, 0x39, 0x2e, 0xed, 0x49, 0x47, 0xf9, 0xcc, 0xe1, 0x1b, 0x91, 0xba, 0x67, 0x8c,
	0xf7, 0x46, 0xe6, 0xe4, 0x66, 0x6e, 0x46, 0xc8, 0x67, 0x6c, 0x45, 0x98, 0x1b, 0xc2, 0x15, 0x61,
	0x7e, 0x10, 0xe7, 0x84, 0x7c, 0x7e, 0x55, 0x84, 0xb9, 0xf9, 0x56, 0x11, 0x16, 0x86, 0xdc, 0x85,
	0xed, 0xdf, 0xcb, 0xe0, 0xd0, 0x6a, 0xec, 0x8f, 0xd3, 0x0c, 0x0f, 0x76, 0x1f, 0x1d, 0xd2, 0x28,
	0xc8, 0xb6, 0xa8, 0xa2, 0x50, 0x68, 0xb4, 0x2a, 0x0a, 0xc5, 0xfe, 0x29, 0x92, 0x9f, 0xb5, 0x41,
	0x9d, 0xfc, 0x66, 0xf3, 0xd4, 0xc9, 0x9f, 0xeb, 0x95, 0xc2, 0x76, 0xd6, 0xde, 0xb4, 0xed, 0x66,
	0xa3, 0xd4, 0xb6, 0xe7, 0x7a, 0x20, 0x4f, 0x1b, 0xd9, 0xb4, 0x94, 0xc2, 0x85, 0x16, 0xa8, 0x14,
	0x2e, 0x76, 0x37, 0x4e, 0x2e, 0xdb, 0x8c, 0x22, 0x2f, 0x34, 0x37, 0x45, 0x5e, 0xec, 0x47, 0x3c,
	0x67, 0x8c, 0x4e, 0xa1, 0x72, 0xe6, 0x6c, 0x47, 0x52, 0x39, 0x33, 0xa1, 0xb1, 0xb8, 0x0b, 0xe8,
	0x10, 0x96, 0xcd, 0x8a, 0x8f, 0x74, 0x86, 0x9d, 0xe9, 0x2d, 0xed, 0xff, 0x4e, 0x3c, 0x93, 0xac,
	0xee, 0x36, 0x7f, 0x79, 0xb5, 0x66, 0xfd, 0xf6, 0x6a, 0xcd, 0xfa, 0xf3, 0xd5, 0x9a, 0xf5, 0xd3,
	0x5f, 0x6b, 0x0b, 0x47, 0x55, 0x76, 0xff, 0xe6, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x41, 0x5e,
	0xd6, 0x2a, 0xae, 0x17, 0x00, 0x00,
}
